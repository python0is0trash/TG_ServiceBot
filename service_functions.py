from telebot import types

from config import bot, emoji_digit, tg_profile_link, vk_profile_link, denied_strings


# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —Å–∏–º–≤–æ–ª—ã
def num_to_emoji(current_number):
    digit_to_emoji = ''
    for digit in range(len(str(current_number))):
        digit_to_emoji += emoji_digit[int(str(current_number)[digit])]
    return digit_to_emoji


def links_from_start():
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.row(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link),
                      types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))
    markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
    return markup_inline


# —Ñ–æ—Ä–º–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Å—ã–ª–æ–∫
def links_without_button_back():
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.row(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link),
                      types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))
    # markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_start'))
    return markup_inline


# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –æ—à–∏–±–∫–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞
def error_from_user(message, error_code=None):
    bot.reply_to(message=message,
                 text='–û—à–∏–±–∫–∞!\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ' + str(error_code) + '\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start).\n\n–°—Å—ã–ª–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:',
                 parse_mode='html',
                 reply_markup=links_without_button_back())


# —É–¥–∞–ª–µ–Ω–∏–µ ReplyMarkup –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –∫–∞–∫—É—é-–ª–∏–±–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É
def delete_reply_markup(message, text_hint='–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...'):
    chat_id = message.chat.id

    delete_keyboard_markup = types.ReplyKeyboardRemove()
    msg = bot.send_message(chat_id=chat_id,
                           text=f'‚è≥ {text_hint}',
                           reply_markup=delete_keyboard_markup)
    bot.delete_message(chat_id=chat_id,
                       message_id=msg.message_id)


def info_to_chat(message, info=None, split_method=None):
    chat_id = message.chat.id

    if len(info) > 4000:
        pages_count = int(len(info) / 4000) + 1
        list_info = info.strip().split(str(split_method))
        info = ''
        current_page = 1
        for current_cadet in range(len(list_info)):
            if len(info + list_info[current_cadet]) < 4000:
                info += list_info[current_cadet] + str(split_method)
            else:
                bot.send_message(chat_id=chat_id,
                                 text=f'{info}\n'
                                      f''
                                      f'(—á–∞—Å—Ç—å {current_page} –∏–∑ {pages_count})',
                                 parse_mode='html')
                current_page += 1
                info = list_info[current_cadet] + str(split_method)
        if info:
            bot.send_message(chat_id=chat_id,
                             text=f'{info}\n'
                                  f''
                                  f''
                                  f'(—á–∞—Å—Ç—å {current_page} –∏–∑ {pages_count})',
                             parse_mode='html')
    else:
        bot.send_message(chat_id=chat_id,
                         text=info,
                         parse_mode='html')


def is_right_string(input_string):
    value = True
    if len(input_string) > 40:
        value = False
    else:
        for current_string in denied_strings:
            if current_string in input_string:
                value = False
                break
    return value


def role_from_db_to_text(current_role, process_index=1):
    if process_index == 1:
        if current_role == 'officer':
            return '–û—Ñ–∏—Ü–µ—Ä'
        if current_role == 'helper':
            return '–ü–æ–º–æ—â–Ω–∏–∫'
        if current_role == 'cadet':
            return '–ö—É—Ä—Å–∞–Ω—Ç'
        if current_role == 'guest':
            return '–ì–æ—Å—Ç—å'
    elif process_index == 2:
        if current_role == '–û—Ñ–∏—Ü–µ—Ä':
            return 'officer'
        if current_role == '–ü–æ–º–æ—â–Ω–∏–∫':
            return 'helper'
        if current_role == '–ö—É—Ä—Å–∞–Ω—Ç':
            return 'cadet'
        if current_role == '–ì–æ—Å—Ç—å':
            return 'guest'
