# -*- coding: utf-8 -*-

from telebot import types
import sqlite3
import pandas as pd
import openpyxl
import os
import glob
from datetime import (datetime,
                      timedelta)
import schedule
from threading import Thread
from time import sleep

from config import *
from service_functions import (num_to_emoji,
                               links_from_start,
                               links_without_button_back,
                               error_from_user,
                               delete_reply_markup,
                               info_to_chat,
                               is_right_string,
                               role_from_db_to_text)
from create_db import (create_table_students,
                       create_table_schedule,
                       create_table_users)


create_table_students()
create_table_schedule()
create_table_users()


def schedule_checker():
    while True:
        schedule.run_pending()
        sleep(1)


@bot.message_handler(
    commands=['start', 'logout', 'main_page',
              'schedule', 'help', 'id', 'all', 'add_info', 'update_students', 'update_users',
              'add_schedule', 'current_schedule', 'subscribe_to_schedule',
              'add_cadet', 'update_cadet', 'delete_cadet',
              'update_user', 'delete_user',
              'hospital_phone'])
def all_commands(message):
    chat_id = message.chat.id

    try:
        if users[chat_id].user_role:
            if message.text == '/start':
                delete_reply_markup(message=message)
                return command_start(message=message)
            elif message.text == '/logout':
                delete_reply_markup(message=message)
                return command_logout(message=message)
            elif message.text == '/help':
                delete_reply_markup(message=message,
                                    text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–º–æ—â–∏...')
                return command_help(message=message, do_edit_message=False)
            elif message.text == '/id':
                delete_reply_markup(message=message,
                                    text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...')
                return command_my_id(message=message, do_edit_message=False)

            elif users[chat_id].user_role != 'guest':
                if message.text == '/main_page':
                    delete_reply_markup(message=message,
                                        text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
                    return command_main_page(message=message)
                elif message.text == '/all':
                    delete_reply_markup(message=message,
                                        text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö...')
                    return command_all(message=message, do_edit_message=False, process_index=1)
                elif message.text == '/schedule':
                    delete_reply_markup(message=message,
                                        text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
                    return command_schedule(message=message, do_edit_message=False)
                elif message.text == '/current_schedule':
                    delete_reply_markup(message=message,
                                        text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...')
                    return create_schedule_courses(message, do_edit_message=False, process_index=1)
                elif message.text == '/subscribe_to_schedule':
                    delete_reply_markup(message=message,
                                        text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...')
                    return create_schedule_courses(message, do_edit_message=False, process_index=2)
                elif message.text == '/hospital_phone':
                    delete_reply_markup(message=message,
                                        text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...')
                    return command_hospital_phone(message=message)

                elif users[chat_id].user_role != 'cadet':
                    if message.text == '/add_info':
                        delete_reply_markup(message=message,
                                            text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö...')
                        return command_all(message=message, do_edit_message=False, process_index=2)
                    elif message.text == '/add_schedule':
                        delete_reply_markup(message=message,
                                            text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
                        return schedule_document_rules(message=message)

                    elif users[chat_id].user_role != 'helper':
                        if message.text == '/update_students':
                            delete_reply_markup(message=message,
                                                text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö...')
                            return update_students(message, do_edit_message=False)
                        elif message.text == '/add_cadet':
                            delete_reply_markup(message=message,
                                                text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–Ω—Ç–∞...')
                            return command_add_cadet(message=message, do_edit_message=False)
                        elif message.text == '/update_cadet':
                            delete_reply_markup(message=message,
                                                text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö...')
                            return command_all(message=message, do_edit_message=False, process_index=4)
                        elif message.text == '/delete_cadet':
                            delete_reply_markup(message=message,
                                                text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö...')
                            return command_all(message=message, do_edit_message=False, process_index=3)
                        elif message.text == '/update_users':
                            delete_reply_markup(message=message,
                                                text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö...')
                            return command_update_users(message, do_edit_message=False)
                        elif message.text == '/update_user':
                            delete_reply_markup(message=message,
                                                text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö...')
                            return command_update_user(message=message, process_index=1)
                        elif message.text == '/delete_user':
                            delete_reply_markup(message=message,
                                                text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
                            return command_update_user(message=message, process_index=2)
                else:
                    markup_inline = types.InlineKeyboardMarkup()
                    button_back = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main_page')
                    markup_inline.add(button_back)
                    bot.send_message(chat_id=chat_id,
                                     text='–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                     reply_markup=markup_inline)
            else:
                markup_inline = types.InlineKeyboardMarkup()
                button_back = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_start')
                markup_inline.add(button_back)
                bot.send_message(chat_id=chat_id,
                                 text='–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!',
                                 reply_markup=markup_inline)
    except KeyError:
        users[chat_id] = User()
        users[chat_id].user_id = message.from_user.id
        users[chat_id].user_name = message.from_user.first_name
        users[chat_id].user_role = 'guest'
        return all_commands(message=message)


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤—Ö–æ–¥–∞
def command_start(message, do_edit_message=False):
    chat_id = message.chat.id

    if (users[chat_id].user_role == 'officer') or (users[chat_id].user_role == 'helper') or (
            users[chat_id].user_role == 'cadet'):
        return command_logout(message=message)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='üö™ –í–æ–π—Ç–∏', callback_data='login'),
                          types.InlineKeyboardButton(text='‚ñ∂ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='signup'))
        markup_inline.add(types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='from_mainpage_to_help'))
        markup_inline.add(types.InlineKeyboardButton(text='üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
                                                     callback_data='from_mainpage_to_info_about_user'))

        if do_edit_message:
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message.message_id,
                                  text=start_message,
                                  reply_markup=markup_inline)
        else:
            bot.send_message(chat_id=chat_id,
                             text=start_message,
                             reply_markup=markup_inline)


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞)
def signup_in_system(message):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))
    bot.edit_message_text(chat_id=chat_id,
                          message_id=message.message_id,
                          text='‚ñ∂ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), '
                               '–Ω–∞–ø—Ä–∏–º–µ—Ä \"<b>user1234</b>\".',
                          parse_mode='html',
                          reply_markup=markup_inline)
    bot.register_next_step_handler(message, signup_check_login)


# –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
def signup_check_login(message):
    chat_id = message.chat.id

    try:
        if message.text in command_list:
            return all_commands(message=message)

        elif (message.text) and (is_right_string(message.text)):
            with sqlite3.connect('./data_bases/users.sqlite3') as connection:
                cursor = connection.cursor()
            cursor.execute('''
                SELECT 
                    user_login 
                FROM 
                    users 
                WHERE 
                    user_login == ('%s');
            '''
                           % (str(message.text)))
            login_overlap = cursor.fetchone()
            connection.commit()
            cursor.close()
            connection.close()
            if login_overlap:
                bot.send_message(chat_id=chat_id,
                                 text='üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.',
                                 reply_markup=links_from_start())
                bot.register_next_step_handler(message, signup_check_login)
            else:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(types.InlineKeyboardButton(text='üîÅ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='signup'))

                bot.send_message(chat_id=chat_id,
                                 text='‚ñ∂ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤).',
                                 reply_markup=markup_inline)
                bot.register_next_step_handler(message, signup_check_password, register_login=message.text.strip())
        else:
            bot.send_message(chat_id=chat_id,
                             text='üö® –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω.',
                             reply_markup=links_from_start())
            bot.register_next_step_handler(message, signup_check_login)
    except TypeError:
        bot.send_message(chat_id=chat_id,
                         text='üö® –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω.',
                         reply_markup=links_from_start())
        bot.register_next_step_handler(message, signup_check_login)


# –¥–æ–≤–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def signup_check_password(message, register_login=None):
    chat_id = message.chat.id

    try:
        if message.text in command_list:
            return all_commands(message=message)

        elif (message.text) and (is_right_string(message.text)):
            new_user_password = message.text.strip()

            with sqlite3.connect('./data_bases/users.sqlite3') as connection:
                cursor = connection.cursor()
            cursor.execute('''
                INSERT INTO 
                    users (
                        user_login, 
                        user_password) 
                VALUES ('%s', '%s');
            '''
                           % (str(register_login), str(new_user_password)))
            connection.commit()
            cursor.close()
            connection.close()

            bot.send_message(chat_id=chat_id,
                             text=f'üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{register_login}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! '
                                  f'–í–∞—à –ø–∞—Ä–æ–ª—å: <b>{new_user_password}</b>.\n\n'
                                  f''
                                  f'üÜî –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
                             parse_mode='html')
            return login_in_system(message=message, do_edit_message=False)

        else:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.row(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link),
                              types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='signup'))
            bot.send_message(chat_id=chat_id,
                             text='üö® –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.',
                             reply_markup=markup_inline)
            bot.register_next_step_handler(message, signup_check_password, register_login=register_login)

    except TypeError:
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.row(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link),
                          types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))
        markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='signup'))
        bot.send_message(chat_id=chat_id,
                         text='üö® –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.',
                         reply_markup=markup_inline)
        bot.register_next_step_handler(message, signup_check_password, register_login=register_login)


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞)
def login_in_system(message, do_edit_message=False):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))

    if do_edit_message:
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text='üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n'
                                   '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä \"<b>user1234</b>\".',
                              parse_mode='html',
                              reply_markup=markup_inline)
    else:
        bot.send_message(chat_id=chat_id,
                         text='üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                              '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä \"<b>user1234</b>\".',
                         parse_mode='html',
                         reply_markup=markup_inline)
    bot.register_next_step_handler(message, login_check_login)


# –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
def login_check_login(message):
    chat_id = message.chat.id

    try:
        if message.text in command_list:
            return all_commands(message=message)

        elif (message.text) and (is_right_string(message.text)):
            current_login = message.text

            with sqlite3.connect('./data_bases/users.sqlite3') as connection:
                cursor = connection.cursor()
            cursor.execute('''
                SELECT 
                    user_login 
                FROM 
                    users 
                WHERE user_login == ('%s');
            '''
                           % str(current_login))
            logins = cursor.fetchone()
            connection.commit()
            cursor.close()
            connection.close()

            if logins:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add(types.InlineKeyboardButton(text='üîÅ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω', callback_data='login'))
                bot.send_message(chat_id=chat_id,
                                 text=f'‚úî –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞, <b>{current_login}</b>! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å.',
                                 parse_mode='html',
                                 reply_markup=markup_inline)
                bot.register_next_step_handler(message, login_check_password, user_login=current_login)
            else:
                bot.send_message(chat_id=chat_id,
                                 text='‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! '
                                      '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                                 parse_mode='html',
                                 reply_markup=links_from_start())
                bot.register_next_step_handler(message, login_check_login)
        else:
            bot.send_message(chat_id=chat_id,
                             text='‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞! '
                                  '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                             parse_mode='html',
                             reply_markup=links_from_start())
            bot.register_next_step_handler(message, login_check_login)

    except TypeError:
        bot.send_message(chat_id=chat_id,
                         text='‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞! '
                              '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                         parse_mode='html',
                         reply_markup=links_from_start())
        bot.register_next_step_handler(message, login_check_login)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
def login_check_password(message, user_login=None):
    chat_id = message.chat.id

    try:
        if message.text in command_list:
            return all_commands(message=message)

        elif (message.text) and (is_right_string(message.text)):
            current_password = message.text

            with sqlite3.connect('./data_bases/users.sqlite3') as connection:
                cursor = connection.cursor()
            cursor.execute('''
                SELECT 
                    user_id,   
                    user_login, 
                    user_role, 
                    tg_chat_id 
                FROM 
                    users 
                WHERE 
                    user_login == ('%s') AND user_password == ('%s');
            '''
                           % (str(user_login), str(current_password)))
            user_password = cursor.fetchone()

            if user_password:
                if user_password[3] == default_tg_chat_id:
                    cursor.execute('''
                        UPDATE 
                            users 
                        SET 
                            tg_chat_id = ('%d') 
                        WHERE 
                            user_id == ('%d');
                    '''
                                   % (int(chat_id), int(user_password[0]))
                                   )
                else:
                    cursor.execute('''
                        INSERT INTO 
                            users (
                                user_login, 
                                user_password, 
                                user_role, 
                                tg_chat_id) 
                        VALUES ('%s', '%s', '%s', '%d');
                    '''
                                   % (str(user_password[1]), str(current_password), str(user_password[2]), int(chat_id))
                                   )

                users[chat_id] = User()
                users[chat_id].user_id = message.from_user.id
                users[chat_id].user_name = message.from_user.first_name
                users[chat_id].user_role = user_password[2]
                connection.commit()
                cursor.close()
                connection.close()
                msg = bot.send_message(chat_id=chat_id,
                                 text=f'üîì –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º <u>{user_password[1]}</u>!',
                                 parse_mode='html')
                sleep(1)
                bot.delete_message(chat_id=chat_id,
                                   message_id=msg.message_id)
                return command_main_page(message=message, do_edit_message=False)
            else:
                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.row(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link),
                                  types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))
                markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='login'))
                bot.send_message(chat_id=chat_id,
                                 text=f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_login}</b> —Å —Ç–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! '
                                      '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                                 parse_mode='html',
                                 reply_markup=markup_inline)
                cursor.close()
                connection.close()
                bot.register_next_step_handler(message, login_check_password, user_login=user_login)
        else:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.row(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link),
                              types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='login'))
            bot.send_message(chat_id=chat_id,
                             text='‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞! '
                                  '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                             parse_mode='html',
                             reply_markup=markup_inline)
            bot.register_next_step_handler(message, login_check_password, user_login=user_login)

    except TypeError:
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.row(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link),
                          types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))
        markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='login'))
        bot.send_message(chat_id=chat_id,
                         text='‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞! '
                              '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                         parse_mode='html',
                         reply_markup=markup_inline)
        bot.register_next_step_handler(message, login_check_password, user_login=user_login)


def command_logout(message):
    chat_id = message.chat.id

    if (users[chat_id].user_role == 'officer') or (users[chat_id].user_role == 'helper') or (
            users[chat_id].user_role == 'cadet'):
        with sqlite3.connect('./data_bases/users.sqlite3') as connection:
            cursor = connection.cursor()
        cursor.execute('''
            SELECT 
                user_login 
            FROM 
                users 
            WHERE 
                tg_chat_id == ('%d');
        '''
                       % (int(chat_id)))
        is_user_login_from_db = cursor.fetchone()
        connection.commit()
        cursor.close()
        connection.close()

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='üî¥ –î–∞, –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è', callback_data='log_out'),
                          types.InlineKeyboardButton(text='üü¢ –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='stay_on_system'))
        bot.send_message(chat_id=chat_id,
                         text=f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è <b>{is_user_login_from_db[0]}</b>?',
                         parse_mode='html',
                         reply_markup=markup_inline)
    else:
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='signup'),
                          types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
        bot.send_message(chat_id=chat_id,
                         text=f'‚ùï –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? ‚ùï',
                         reply_markup=markup_inline)


def logout_function(message):
    chat_id = message.chat.id

    try:
        with sqlite3.connect('./data_bases/users.sqlite3') as connection:
            cursor = connection.cursor()
        cursor.execute('''
            SELECT 
                user_login 
            FROM 
                users 
            WHERE 
                tg_chat_id == ('%d');
        '''
                       % (int(chat_id)))
        user_login_help = cursor.fetchone()
        cursor.execute('''
            SELECT 
                COUNT(user_login) 
            FROM 
                users 
            WHERE 
                user_login == ('%s');
        '''
                       % (str(user_login_help[0])))
        count = cursor.fetchone()

        if (count[0]) > 1:
            cursor.execute('''
                DELETE FROM 
                    users 
                WHERE 
                    tg_chat_id == ('%d');
            '''
                           % (int(chat_id))
                           )
        else:
            cursor.execute('''
                UPDATE 
                    users 
                SET 
                    tg_chat_id = {default_tg_id} 
                WHERE 
                    tg_chat_id == {tg_id_from_user}; 
            '''
                           .format(default_tg_id=int(default_tg_chat_id),
                                   tg_id_from_user=int(chat_id)))
        connection.commit()
        cursor.close()
        connection.close()
        users[chat_id].user_role = 'guest'

        return command_start(message=message, do_edit_message=True)

    except Exception as e:
        return error_from_user(message=message, error_code=e)


def command_hospital_phone(message):
    bot.send_contact(chat_id=message.chat.id,
                     phone_number=hospital_phone,
                     first_name='–¶–ü ‚Ññ2')


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ–≥–æ
def subscribe_to_schedule(help_course=None, help_platoon=None, help_group=None, chat_id=None):
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    tomorrow_day = str((datetime.now() + timedelta(days=1)).day)
    if len(tomorrow_day) == 1:
        tomorrow_day = '0' + tomorrow_day
    tomorrow_month = str((datetime.now() + timedelta(days=1)).month)
    if len(tomorrow_month) == 1:
        tomorrow_month = '0' + tomorrow_month

    with sqlite3.connect('./data_bases/schedule.sqlite3') as connection_to_db_main:
        cursor_db = connection_to_db_main.cursor()
    cursor_db.execute('''
        SELECT 
            li.schedule_lesson_time, 
            li.schedule_lesson, 
            li.schedule_type_of_lesson, 
            li.schedule_tutor, 
            li.schedule_lesson_room
        FROM 
            lessons_info as li
        LEFT OUTER JOIN 
            group_info AS gi
        ON 
            li.group_id = gi.group_id
        WHERE 
            li.schedule_lesson_day == ('%s') AND li.schedule_lesson_month == ('%s') AND schedule_course == ('%d') AND schedule_platoon == ('%s') AND schedule_group == ('%s')
        ORDER BY 
            li.schedule_lesson_time;
    '''
                      % (str(tomorrow_day), str(tomorrow_month), int(help_course), str(help_platoon), str(help_group)))
    lessons_tomorrow = cursor_db.fetchall()

    connection_to_db_main.commit()
    cursor_db.close()
    connection_to_db_main.close()

    lessons_count = 1

    info_lessons = (
        f'{days_week_to_emoji[(datetime.now() + timedelta(days=1)).weekday()]} <i><b><u>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</u></b></i>, {num_to_emoji(str(tomorrow_day))}.{num_to_emoji(str(tomorrow_month))}, {days_week[(datetime.now() + timedelta(days=1)).weekday()]}, '
        f'<i><b><u>–¥–ª—è</u></b></i> {num_to_emoji(str(help_course))}<i><b><u>–≥–æ –∫—É—Ä—Å–∞</u></b></i> {num_to_emoji(str(help_platoon).split(" ")[0])}-{num_to_emoji(str(help_group).split("/")[-1])}<i><b><u>–≥–æ –≤–∑–≤–æ–¥–∞:</u></b></i>\n\n')
    if lessons_tomorrow:
        for current_lesson in lessons_tomorrow:
            info_lessons += (f'{num_to_emoji(str(lessons_count))} üï∞ \t{current_lesson[0]} üï∞\n'
                             f'üéì \t<b>{current_lesson[1]}</b>\n'
                             f'üî¨ \t{current_lesson[2]} / üë® {current_lesson[3]}\n'
                             f'üö™ \t{current_lesson[4]}\n\n')
            lessons_count += 1
    else:
        info_lessons += 'üßß –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π!\n\n'

    bot.send_message(chat_id=chat_id, text=info_lessons, parse_mode='html')


# –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ–≥–æ
def unsubscribe_to_schedule(message):
    chat_id = message.chat.id
    try:
        schedule.clear()
        user = users[chat_id]
        user.is_subscribe_to_schedule = False

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='‚úî –•–æ—Ä–æ—à–æ', callback_data='back_to_schedule'))
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text='–í—ã <b>–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b> –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö.',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except Exception as e:
        return error_from_user(message=message, error_code=e)


def command_main_page(message, do_edit_message=False):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    button_shedule = types.InlineKeyboardButton(text='üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π', callback_data='from_mainpage_to_schedule')
    button_help = types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='from_mainpage_to_help')
    button_all = types.InlineKeyboardButton(text='üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö', callback_data='from_mainpage_to_all')
    button_id = types.InlineKeyboardButton(text='üëã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
                                           callback_data='from_mainpage_to_info_about_user')
    button_add_info = types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö',
                                                 callback_data='from_mainpage_to_add')
    button_update_students = types.InlineKeyboardButton(text='üë®‚Äçüéì –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–∞–Ω—Ç–∞', callback_data='from_mainpage_to_update_students')
    button_update_users = types.InlineKeyboardButton(text='üë®‚Äçüíª –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='from_mainpage_to_update_users')

    if (users[chat_id].user_role == 'officer') or (users[chat_id].user_role == 'helper'):
        markup_inline.row(button_shedule)
        markup_inline.row(button_all, button_add_info)
        if users[chat_id].user_role == 'officer':
            markup_inline.row(button_update_students)
            markup_inline.row(button_update_users)
        markup_inline.row(button_help, button_id)
    elif users[chat_id].user_role == 'cadet':
        markup_inline.row(button_shedule)
        markup_inline.row(button_all)
        markup_inline.row(button_help, button_id)

    if do_edit_message:
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text='‚ñ∂ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–∫–æ–º–∞–Ω–¥—ã</b> (–∑–Ω–∞–∫ \"/\" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞) –∏–ª–∏ <b>–Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é</b> –Ω–∏–∂–µ.',
                              reply_markup=markup_inline,
                              parse_mode='html')
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚ñ∂ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–∫–æ–º–∞–Ω–¥—ã</b> (–∑–Ω–∞–∫ \"/\" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞) –∏–ª–∏ <b>–Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é</b> –Ω–∏–∂–µ.',
                         reply_markup=markup_inline,
                         parse_mode='html')


def update_students(message, do_edit_message=False):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text='üë®üéì –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å–∞–Ω—Ç–∞',
                                                 callback_data='from_updatestudents_to_add_student'))
    markup_inline.add(types.InlineKeyboardButton(text='üë®üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–∞–Ω—Ç–∞',
                                                 callback_data='from_updatestudents_to_update_student'),
                      types.InlineKeyboardButton(text='üë®‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å–∞–Ω—Ç–∞',
                                                 callback_data='from_updatestudents_to_delete_student'))
    markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                                 callback_data='back_to_main_page'))

    if do_edit_message:
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text='‚ùî –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                              reply_markup=markup_inline,
                              parse_mode='html')
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚ùî –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=markup_inline,
                         parse_mode='html')


def command_update_users(message, do_edit_message=False):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text='üë®‚ÄçüíªüîÅ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                 callback_data='from_updateusers_to_update_user'))
    markup_inline.add(types.InlineKeyboardButton(text='üë®‚Äçüíª‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                                                 callback_data='from_updateusers_to_delete_user'))
    markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                                 callback_data='back_to_main_page'))

    if do_edit_message:
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text='‚ùî –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                              reply_markup=markup_inline,
                              parse_mode='html')
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚ùî –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=markup_inline,
                         parse_mode='html')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏
def command_help(message, do_edit_message=False):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text='üîó Telegram', url=tg_profile_link))
    markup_inline.add(types.InlineKeyboardButton(text='üîó VK', url=vk_profile_link))

    if users[chat_id].user_role != 'guest':
        markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_main_page'))
    else:
        markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))

    if do_edit_message:
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=help_command_description,
                              reply_markup=markup_inline,
                              parse_mode='html'
                              )
    else:
        bot.reply_to(message=message,
                     text=help_command_description,
                     parse_mode='html',
                     reply_markup=markup_inline)


def command_my_id(message, do_edit_message=False):
    chat_id = message.chat.id

    try:
        markup_inline = types.InlineKeyboardMarkup()
        if users[chat_id].user_role != 'guest':
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_main_page'))
        else:
            markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_start'))

        if do_edit_message:
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message.message_id,
                                  text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n'
                                       f'\t‚îú <b>{users[chat_id].user_name}</b>\n'
                                       f'–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:\n'
                                       f'\t‚îî <b>{users[chat_id].user_id}</b>.',
                                  reply_markup=markup_inline,
                                  parse_mode='html')
        else:
            bot.send_message(chat_id=chat_id,
                             text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,\n'
                                  f'\t‚îú <b>{users[chat_id].user_name}</b>\n'
                                  f'–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:\n'
                                  f'\t‚îî <b>{users[chat_id].user_id}</b>.',
                             reply_markup=markup_inline,
                             parse_mode='html')

    except Exception:
        if do_edit_message:
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message.message_id,
                                  text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:',
                                  reply_markup=links_without_button_back(),
                                  parse_mode='html')
        else:
            bot.send_message(chat_id=chat_id,
                             text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:',
                             reply_markup=links_without_button_back(),
                             parse_mode='html')


# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def command_schedule(message, do_edit_message=False):
    chat_id = message.chat.id

    try:
        markup_inline = types.InlineKeyboardMarkup()
        button_add_file = types.InlineKeyboardButton(text='‚¨á –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞/–≤–∑–≤–æ–¥–∞',
                                                     callback_data='add_file_from_user_callback')
        button_today_schedule = types.InlineKeyboardButton(text='üìÜ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                                                           callback_data='today_schedule_callback')
        if users[chat_id].is_subscribe_to_schedule:
            button_subscribe_to_schedule = types.InlineKeyboardButton(
                text='üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏',
                callback_data='unsubscribe_to_schedule_callback')
        else:
            button_subscribe_to_schedule = types.InlineKeyboardButton(text='üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏',
                                                                      callback_data='subscribe_to_schedule_callback')
        button_back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_main_page')

        if (users[chat_id].user_role == 'officer') or (users[chat_id].user_role == 'helper'):
            markup_inline.add(button_add_file)
        markup_inline.add(button_today_schedule)
        markup_inline.add(button_subscribe_to_schedule)
        markup_inline.add(button_back)
        if do_edit_message:
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message.message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é.',
                                  reply_markup=markup_inline)
        else:
            bot.send_message(chat_id=chat_id,
                             text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é.',
                             reply_markup=markup_inline)

    except Exception as e:
        return error_from_user(message=message, error_code=e)


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def schedule_document_rules(message):
    chat_id = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True,
                                       input_field_placeholder='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîô –ù–∞–∑–∞–¥\"...')
    markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
    bot.send_photo(chat_id=chat_id,
                   photo=open('./images/schedule_example_img.png', 'rb'),
                   caption=schedule_file_rules,
                   parse_mode='html',
                   reply_markup=markup)
    bot.register_next_step_handler(message, take_document)


# —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def schedule_document_rules_error(message):
    chat_id = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True,
                                       input_field_placeholder='–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîô –ù–∞–∑–∞–¥\"...')
    markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))

    bot.send_message(chat_id=chat_id,
                     text='‚Ñπ –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã—à–ª–∏—Ç–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ñ–∞–π–ª Excel (.xlsx).',
                     reply_markup=markup)
    bot.register_next_step_handler(message, take_document)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def check_schedule_document_from_user(message, msg_help=None):
    chat_id = message.chat.id

    try:
        main_table = openpyxl.load_workbook(users[chat_id].excel_schedule_file_name)
        worksheet = main_table.active

        max_column = worksheet.max_column

        groups_from_document = {}

        # –Ω–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        start_row = 1
        while worksheet.cell(row=start_row, column=1).value != '–î–∞—Ç–∞':
            start_row += 1

        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∑–≤–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'–≤–∑–≤–æ–¥1': [], '–≤–∑–≤–æ–¥2': []}
        for current_platoon in range(3, max_column + 1):
            if str(worksheet.cell(row=start_row, column=current_platoon).value) != 'None':
                groups_from_document[str(worksheet.cell(row=start_row, column=current_platoon).value)] = []

        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'–≤–∑–≤–æ–¥1': ['–≥—Ä—É–ø–ø–∞1', '–≥—Ä—É–ø–ø–∞2'], '–≤–∑–≤–æ–¥2': ['–≥—Ä—É–ø–ø–∞1', '–≥—Ä—É–ø–ø–∞2']}
        help_platoon = ''
        count_group = 1
        for current_group in range(3, max_column + 1):
            if str(worksheet.cell(row=start_row + 1, column=current_group).value) != 'None':
                if str(worksheet.cell(row=start_row, column=current_group).value) != 'None':
                    count_group = 1
                    help_platoon = str(worksheet.cell(row=start_row, column=current_group).value)
                    groups_from_document[help_platoon].append(str(worksheet.cell(row=start_row + 1, column=current_group).value))
                    count_group += 1
                else:
                    groups_from_document[help_platoon].append(str(worksheet.cell(row=start_row + 1, column=current_group).value))
                    count_group += 1
            else:
                if str(worksheet.cell(row=start_row, column=current_group).value) != 'None':
                    count_group = 1
                    help_platoon = str(worksheet.cell(row=start_row, column=current_group).value)
                    groups_from_document[help_platoon].append(str(worksheet.cell(row=start_row + 1, column=current_group).value))
                    count_group += 1

        list_info_from_document = ''
        for current_platoon in groups_from_document.keys():
            if current_platoon.split(" ")[0].isdigit():
                list_info_from_document += str(current_platoon) + ' –≤–∑–≤–æ–¥:\n–ì—Ä—É–ø–ø—ã '
                for current_group in range(len(groups_from_document[str(current_platoon)]) - 1):
                    if groups_from_document[str(current_platoon)][current_group].split("/")[-1].isdigit():
                        list_info_from_document += groups_from_document[str(current_platoon)][current_group] + ', '
                    else:
                        if len(groups_from_document[current_platoon]) <= 1:
                            del groups_from_document[current_platoon]
                        else:
                            del groups_from_document[str(current_platoon)][current_group]
                list_info_from_document += groups_from_document[str(current_platoon)][len(groups_from_document[str(current_platoon)]) - 1] + '.\n\n'
            else:
                del groups_from_document[current_platoon]

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.row(types.InlineKeyboardButton(text='‚úî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='apply_to_save_document'),
                          types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='deny_to_save_document'))

        users[chat_id].excel_schedule_file_name = users[chat_id].excel_schedule_file_name.split('/')[-1]

        bot.delete_message(chat_id=chat_id,
                           message_id=msg_help.message_id)
        bot.send_message(chat_id=chat_id,
                         text=f'–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑–≤–æ–¥–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö:\n\n'
                              f''
                              f'{list_info_from_document}'
                              f''
                              f'–ñ–µ–ª–∞–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?',
                         reply_markup=markup_inline)
        return groups_from_document

    except Exception as e:
        return error_from_user(message=message, error_code=e)


# –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def apply_to_save_schedule_document(message):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.row(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_schedule'),
                      types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                 callback_data='add_file_from_user_callback'))
    day_yesterday = str((datetime.now() - timedelta(days=1)).day)
    month_yesterday = str((datetime.now() - timedelta(days=1)).month)
    if len(day_yesterday) == 1:
        day_yesterday = '0' + day_yesterday
    if len(month_yesterday) == 1:
        month_yesterday = '0' + month_yesterday
    schedule_document_to_db(message, day_yesterday, month_yesterday)

    try:
        os.remove('./xlsx_files/' + str(users[chat_id].excel_schedule_file_name))

        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=f'–§–∞–π–ª \"<b>{users[chat_id].excel_schedule_file_name}</b>\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!',
                              reply_markup=markup_inline,
                              parse_mode='html')
    except FileNotFoundError:
        files = glob.glob('./xlsx_files/*')
        for file in files:
            os.remove(file)
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=f'–§–∞–π–ª \"<b>{users[chat_id].excel_schedule_file_name}</b>\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!',
                              reply_markup=markup_inline,
                              parse_mode='html')


# –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∂–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def deny_to_save_schedule_document(message):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.row(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_schedule'),
                      types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                                 callback_data='add_file_from_user_callback'))

    try:
        os.remove('./xlsx_files/' + str(users[chat_id].excel_schedule_file_name))

        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=f'–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ \"<b>{users[chat_id].excel_schedule_file_name}</b>\".',
                              reply_markup=markup_inline,
                              parse_mode='html')

    except FileNotFoundError:
        files = glob.glob('./xlsx_files/*')
        for file in files:
            os.remove(file)
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=f'–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ \"<b>{users[chat_id].excel_schedule_file_name}</b>\".',
                              reply_markup=markup_inline,
                              parse_mode='html')


# –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã excel –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def schedule_document_to_db(message, past_day=None, past_month=None):
    chat_id = message.chat.id

    try:
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect('./data_bases/schedule.sqlite3') as connection_to_db_main:
            cursor_db = connection_to_db_main.cursor()

        # —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        cursor_db.execute('''
            DELETE FROM 
                lessons_info 
            WHERE 
                (schedule_lesson_day < ('%s') AND schedule_lesson_month <= ('%s')) OR schedule_lesson_month < ('%s');
        '''
                          % (str(past_day), str(past_month), str(past_month))
                          )

        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        main_table = openpyxl.load_workbook('./xlsx_files/' + str(users[chat_id].excel_schedule_file_name))
        worksheet = main_table.active

        max_column = worksheet.max_column

        # –Ω–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        start_row = 1
        while worksheet.cell(row=start_row, column=1).value != '–î–∞—Ç–∞':
            start_row += 1

        # –∫–æ–Ω–µ—Ü —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        end_row = start_row
        while ((str(worksheet.cell(row=end_row, column=1).value) != 'None') or
               (str(worksheet.cell(row=end_row, column=2).value) != 'None') or
               (str(worksheet.cell(row=end_row, column=3).value) != 'None')):
            end_row += 3

        for current_platoon in users[chat_id].groups_in_xlsx_save.keys():
            for value in range(len(users[chat_id].groups_in_xlsx_save[str(current_platoon)])):
                current_group = users[chat_id].groups_in_xlsx_save[str(current_platoon)][value]

                cursor_db.execute('''
                    INSERT OR IGNORE INTO
                        group_info (
                            group_id,
                            schedule_course, 
                            schedule_platoon, 
                            schedule_group) 
                    VALUES (
                        (
                        SELECT 
                            group_id 
                        FROM 
                            group_info 
                        WHERE 
                            schedule_course == {course} AND schedule_platoon == '{platoon}' AND schedule_group == '{group}'
                        ), 
                        {course}, 
                        '{platoon}', 
                        '{group}');
                '''
                                  .format(course=int(last_num_year_of_start - int(current_platoon.split(' ')[0][-2]) + 1) % 10,
                                          platoon=str(current_platoon),
                                          group=str(current_group)))

                # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –≥—Ä—É–ø–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö schedule
                group_index = 1
                cursor_db.execute('''
                    SELECT 
                        group_id 
                    FROM 
                        group_info 
                    WHERE 
                        schedule_course == ('%d') AND schedule_platoon == ('%s') AND schedule_group == ('%s');
                '''
                                  % (int(last_num_year_of_start - int(current_platoon.split(' ')[0][-2]) + 1) % 10, str(current_platoon), str(current_group)))
                group_index = int(cursor_db.fetchone()[0])

                # list_time = []

                date_from_xlsx = ''
                time_from_xlsx = ''
                start_column_course = 3
                start_column_platoon = 3
                end_column_platoon = 4
                start_column_group = 3
                end_column_group = 4

                rasp_dictionary = {}

                # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—á–∞–ª–µ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–Ω—è—Ç–∏—è—Ö
                for start_of_read in range(start_column_course, max_column + 1):
                    if str(worksheet.cell(row=start_row, column=start_of_read).value) == str(current_platoon):
                        start_column_platoon = start_of_read
                        end_column_platoon = start_of_read + 1
                        break
                while (str(worksheet.cell(row=start_row, column=end_column_platoon).value) == 'None' or
                       str(worksheet.cell(row=start_row + 1, column=end_column_platoon).value) == 'None'):
                    end_column_platoon += 1
                    if end_column_platoon == max_column + 1:
                        break
                end_column_platoon -= 1

                for start_of_read in range(start_column_platoon, max_column + 1):
                    if str(worksheet.cell(row=start_row + 1, column=start_of_read).value) == str(current_group):
                        start_column_group = start_of_read
                        end_column_group = start_of_read + 1
                        break
                while str(worksheet.cell(row=start_row + 1, column=end_column_group).value) == 'None':
                    end_column_group += 1
                    if end_column_group == max_column + 1:
                        break
                end_column_group -= 1

                # print(f'{start_column_course}, {max_column}, {start_column_platoon}, {end_column_platoon}, {start_column_group}, {end_column_group}')

                lesson_count_for_current_date = 1

                # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å "rasp_dictionary[date_from_xlsx][time_from_xlsx] = []"
                for current_string in range(start_row + 3, end_row, 3):
                    # if str(worksheet.cell(row=current_string, column=2).value) not in list_time:
                    #     if str(worksheet.cell(row=current_string, column=2).value) != 'None':
                    #         list_time.append(str(worksheet.cell(row=current_string, column=2).value))
                    #     else:
                    #         if 'None' in list_time:
                    #             list_time.append(f'{count}–µ –∑–∞–Ω—è—Ç–∏–µ')
                    #         else:
                    #             list_time.append('None')
                    #             list_time.append(f'{count}–µ –∑–∞–Ω—è—Ç–∏–µ')

                    if str(worksheet.cell(row=current_string, column=1).value) != 'None':  # –µ—Å—Ç—å –¥–∞—Ç–∞
                        lesson_count_for_current_date = 1
                        date_from_xlsx = str(worksheet.cell(row=current_string, column=1).value).split(',')[0]
                        rasp_dictionary[date_from_xlsx] = {}
                        if str(worksheet.cell(row=current_string, column=2).value) != 'None':  # –µ—Å—Ç—å –¥–∞—Ç–∞ –∏ –µ—Å—Ç—å –≤—Ä–µ–º—è
                            time_from_xlsx = str(worksheet.cell(row=current_string, column=2).value)
                        else:  # –µ—Å—Ç—å –¥–∞—Ç–∞ –∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
                            time_from_xlsx = f'{lesson_count_for_current_date}–µ –∑–∞–Ω—è—Ç–∏–µ'
                        rasp_dictionary[date_from_xlsx][time_from_xlsx] = []
                    else:
                        if str(worksheet.cell(row=current_string, column=2).value) != 'None':  # –Ω–µ—Ç –¥–∞—Ç—ã –∏ –µ—Å—Ç—å –≤—Ä–µ–º—è
                            time_from_xlsx = str(worksheet.cell(row=current_string, column=2).value)
                        else:  # –Ω–µ—Ç –¥–∞—Ç—ã –∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
                            time_from_xlsx = f'{lesson_count_for_current_date}–µ –∑–∞–Ω—è—Ç–∏–µ'
                        rasp_dictionary[date_from_xlsx][time_from_xlsx] = []

                    is_group = True
                    is_platoon = True
                    is_course = True

                    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–Ω—è—Ç–∏–µ –æ–±—â–∏–º –¥–ª—è –∫—É—Ä—Å–∞
                    for is_course_help in range(4, max_column + 1):
                        if str(worksheet.cell(row=current_string, column=is_course_help).value) != 'None':
                            is_course = False
                    if is_course:
                        if not (str(worksheet.cell(row=current_string, column=start_column_course).value) != 'None'
                                and str(worksheet.cell(row=current_string + 2, column=max_column).value) != 'None'):
                            is_course = False
                    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–Ω—è—Ç–∏–µ –æ–±—â–∏–º –¥–ª—è –≤–∑–≤–æ–¥–∞
                    for is_platoon_help in range(start_column_platoon + 1, end_column_platoon + 1):
                        if str(worksheet.cell(row=current_string, column=is_platoon_help).value) != 'None':
                            is_platoon = False
                    if is_platoon:
                        if not (str(worksheet.cell(row=current_string, column=start_column_platoon).value) != 'None'
                                and str(worksheet.cell(row=current_string + 2, column=end_column_platoon).value) != 'None'):
                            is_platoon = False
                    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–Ω—è—Ç–∏–µ –æ–±—â–∏–º –¥–ª—è –≥—Ä—É–ø–ø—ã
                    for is_group_help in range(start_column_group + 1, end_column_group + 1):
                        if str(worksheet.cell(row=current_string, column=is_group_help).value) != 'None':
                            is_group = False
                    if is_group:
                        if not (str(worksheet.cell(row=current_string, column=start_column_group).value) != 'None'
                                and str(worksheet.cell(row=current_string + 2, column=end_column_group).value) != 'None'):
                            is_group = False

                    # –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ .xlsx —Ñ–∞–π–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
                    if is_group:  # –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –≥—Ä—É–ø–ø—ã
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string, column=start_column_group).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 1, column=start_column_group).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 2, column=start_column_group).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 2, column=end_column_group).value))
                    elif is_platoon:  # –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –≤–∑–≤–æ–¥–∞
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string, column=start_column_platoon).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 1, column=start_column_platoon).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 2, column=start_column_platoon).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 2, column=end_column_platoon).value))
                    elif is_course:  # –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –∫—É—Ä—Å–∞
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string, column=start_column_course).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 1, column=start_column_course).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 2, column=start_column_course).value))
                        rasp_dictionary[date_from_xlsx][time_from_xlsx].append(
                            str(worksheet.cell(row=current_string + 2, column=max_column).value))
                    else:
                        del rasp_dictionary[date_from_xlsx][time_from_xlsx]

                    lesson_count_for_current_date += 1
                # –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω—è—Ç–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö schedule
                for current_date in rasp_dictionary.keys():
                    print((str(current_date)).split('.')[0], past_day, (str(current_date)).split('.')[1], past_month)
                    if (((str(current_date)).split('.')[0] >= past_day and (str(current_date)).split('.')[1] >= past_month)
                            or (str(current_date)).split('.')[1] > past_month):

                        cursor_db.execute('''
                            DELETE FROM
                                lessons_info
                            WHERE
                                group_id == ('%d') AND schedule_lesson_day == ('%s') AND schedule_lesson_month == ('%s');
                        '''
                                          % (int(group_index), str(current_date).split('.')[0], str(current_date).split('.')[1]))

                        for time_for_current_date in rasp_dictionary[current_date].keys():
                            cursor_db.execute('''
                                INSERT INTO 
                                    lessons_info (
                                        group_id, 
                                        schedule_lesson_day, 
                                        schedule_lesson_month, 
                                        schedule_lesson_time, 
                                        schedule_lesson, 
                                        schedule_type_of_lesson, 
                                        schedule_tutor, 
                                        schedule_lesson_room) 
                                VALUES ('%d', '%s', '%s', '%s', '%s', '%s', '%s', '%s');
                            '''
                                              % (int(group_index), str(current_date).split('.')[0],
                                                 str(current_date).split('.')[1],
                                                 str(time_for_current_date),
                                                 str(rasp_dictionary[current_date][time_for_current_date][0]),
                                                 str(rasp_dictionary[current_date][time_for_current_date][1]),
                                                 str(rasp_dictionary[current_date][time_for_current_date][2]),
                                                 str(rasp_dictionary[current_date][time_for_current_date][3])))

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–Ω—è—Ç–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö
        cursor_db.execute('''
            DELETE FROM
                group_info
            WHERE
                group_id IN(
                    SELECT
                        gi.group_id
                    FROM
                        group_info AS gi
                    LEFT OUTER JOIN
                        lessons_info AS li
                    ON
                        gi.group_id = li.group_id
                    WHERE
                        lesson_id IS NULL
                    GROUP BY 
                        gi.group_id);
        ''')

        connection_to_db_main.commit()
        cursor_db.close()
        connection_to_db_main.close()

    except Exception as e:
        return error_from_user(message=message, error_code=e)


def create_schedule_courses(message, do_edit_message=False, process_index=1):
    chat_id = message.chat.id

    try:
        with sqlite3.connect('./data_bases/schedule.sqlite3') as connection_to_db_main:
            cursor_db = connection_to_db_main.cursor()
        cursor_db.execute('''
            SELECT 
                schedule_course 
            FROM 
                group_info 
            GROUP BY 
                schedule_course 
            ORDER BY 
                schedule_course;
        ''')
        list_kurs_from_schedule = cursor_db.fetchall()
        connection_to_db_main.commit()
        cursor_db.close()
        connection_to_db_main.close()

        button_course = []
        help_list = []
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=5,
                                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å...')
        for current_button in list_kurs_from_schedule:
            button_course.append(types.KeyboardButton(text=str(current_button[0])))
            help_list.append(str(current_button[0]))
        markup.add(*button_course)
        markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
        markup.add(types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        if do_edit_message:
            bot.delete_message(chat_id=chat_id,
                               message_id=bot.edit_message_text(chat_id=chat_id,
                                                                message_id=message.message_id,
                                                                text='‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...',
                                                                parse_mode='html').message_id)
            bot.send_message(chat_id=chat_id,
                             text=f'{process_index_to_emogi[1][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–ö–£–†–°–ê–ú</b></u>: ',
                             parse_mode='html',
                             reply_markup=markup)

        else:
            bot.send_message(chat_id=chat_id,
                             text=f'{process_index_to_emogi[1][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–ö–£–†–°–ê–ú</b></u>: ',
                             parse_mode='html',
                             reply_markup=markup)

        bot.register_next_step_handler(message, check_schedule_course, list_kurs=help_list,
                                       process_index=process_index)

    except Exception as e:
        return error_from_user(message=message, error_code=e)


def check_schedule_course(message, help_course=None, list_kurs=None, func_input_type=None, process_index=1):
    chat_id = message.chat.id

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (message.text in list_kurs) or (func_input_type == 'back'):
        input_kurs = '1'
        if func_input_type == 'back':
            input_kurs = help_course
        elif message.text in list_kurs:
            input_kurs = message.text
        with sqlite3.connect('./data_bases/schedule.sqlite3') as connection_to_db_main:
            cursor_db = connection_to_db_main.cursor()
        cursor_db.execute('''
            SELECT 
                schedule_platoon 
            FROM 
                group_info 
            WHERE 
                schedule_course == ('%d')
            GROUP BY 
                schedule_platoon 
            ORDER BY 
                schedule_platoon;
        '''
                          % (int(input_kurs)))
        list_vzvod_from_schedule = cursor_db.fetchall()
        connection_to_db_main.commit()
        cursor_db.close()
        connection_to_db_main.close()

        button_platoon = []
        help_list = []
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=5,
                                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∑–≤–æ–¥...')
        for current_button in list_vzvod_from_schedule:
            button_platoon.append(types.KeyboardButton(text=str(current_button[0])))
            help_list.append(str(current_button[0]))
        markup.add(*button_platoon)
        markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
        markup.add(types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.reply_to(message=message,
                     text=f'{process_index_to_emogi[1][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–í–ó–í–û–î–ê–ú</b></u>: ',
                     reply_markup=markup,
                     parse_mode='html')

        bot.register_next_step_handler(message, check_schedule_platoon, help_course=input_kurs, list_platoon=help_list,
                                       process_index=process_index)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        delete_reply_markup(message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
        return command_schedule(message, do_edit_message=False)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text in command_list:
        return all_commands(message=message)
    else:
        bot.send_message(chat_id=chat_id,
                         text=f'‚Ñπ –ö—É—Ä—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: ',
                         reply_markup=links_without_button_back())
        bot.register_next_step_handler(message, check_schedule_course, list_kurs=list_kurs,
                                       process_index=process_index)


def check_schedule_platoon(message, help_course=None, help_platoon=None, list_platoon=None, func_input_type=None,
                                process_index=1):
    chat_id = message.chat.id

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (message.text in list_platoon) or (func_input_type == 'back'):
        input_vzvod = '931'
        if func_input_type == 'back':
            input_vzvod = help_platoon
        elif message.text in list_platoon:
            input_vzvod = message.text
        with sqlite3.connect('./data_bases/schedule.sqlite3') as connection_to_db_main:
            cursor_db = connection_to_db_main.cursor()
        cursor_db.execute('''
            SELECT 
                schedule_group 
            FROM 
                group_info 
            WHERE 
                schedule_platoon == ('%s')
            GROUP BY 
                schedule_group 
            ORDER BY
                schedule_group;
        '''
                          % (str(input_vzvod)))
        list_group_from_schedule = cursor_db.fetchall()
        connection_to_db_main.commit()
        cursor_db.close()
        connection_to_db_main.close()

        button_group = []
        help_list = []
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=5,
                                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É...')
        for current_button in list_group_from_schedule:
            button_group.append(types.KeyboardButton(text=str(current_button[0])))
            help_list.append(str(current_button[0]))
        markup.add(*button_group)
        markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
        markup.add(types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.reply_to(message=message,
                     text=f'{process_index_to_emogi[1][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–ì–†–£–ü–ü–ê–ú</b></u>: ',
                     reply_markup=markup,
                     parse_mode='html')

        bot.register_next_step_handler(message, check_schedule_group, help_course=help_course, help_platoon=input_vzvod,
                                       list_group=help_list, process_index=process_index)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        return create_schedule_courses(message, do_edit_message=False, process_index=process_index)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text in command_list:
        return all_commands(message=message)
    else:
        bot.send_message(chat_id=chat_id,
                         text=f'‚Ñπ –í–∑–≤–æ–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: ',
                         reply_markup=links_without_button_back())
        bot.register_next_step_handler(message, check_schedule_platoon, help_course=help_course, list_platoon=list_platoon,
                                       process_index=process_index)


# –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∑–≤–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
def check_schedule_group(message, help_course=None, help_platoon=None, help_group=None, list_group=None,
                              process_index=1):
    chat_id = message.chat.id

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (message.text in list_group) or (help_group):
        if process_index == 1:
            now_day = str(datetime.now().day)
            if len(now_day) == 1:
                now_day = '0' + now_day
            now_month = str(datetime.now().month)
            if len(now_month) == 1:
                now_month = '0' + now_month
            tomorrow_day = str((datetime.now() + timedelta(days=1)).day)
            if len(tomorrow_day) == 1:
                tomorrow_day = '0' + tomorrow_day
            tomorrow_month = str((datetime.now() + timedelta(days=1)).month)
            if len(tomorrow_month) == 1:
                tomorrow_month = '0' + tomorrow_month

            input_group = message.text
            with sqlite3.connect('./data_bases/schedule.sqlite3') as connection_to_db_main:
                cursor_db = connection_to_db_main.cursor()

            cursor_db.execute('''
                SELECT 
                    li.schedule_lesson_time, 
                    li.schedule_lesson, 
                    li.schedule_type_of_lesson, 
                    li.schedule_tutor, 
                    li.schedule_lesson_room
                FROM 
                    lessons_info as li
                LEFT OUTER JOIN 
                    group_info AS gi
                ON 
                    li.group_id = gi.group_id
                WHERE 
                    li.schedule_lesson_day == ('%s') AND li.schedule_lesson_month == ('%s') AND schedule_course == ('%d') AND schedule_platoon == ('%s') AND schedule_group == ('%s')
                ORDER BY 
                    li.schedule_lesson_month, li.schedule_lesson_time;
            '''
                              % (str(now_day), str(now_month), int(help_course), str(help_platoon), str(input_group)))
            lessons_today = cursor_db.fetchall()

            cursor_db.execute('''
                SELECT 
                    li.schedule_lesson_time, 
                    li.schedule_lesson, 
                    li.schedule_type_of_lesson, 
                    li.schedule_tutor, 
                    li.schedule_lesson_room
                FROM 
                    lessons_info as li
                LEFT OUTER JOIN 
                    group_info AS gi
                ON 
                    li.group_id = gi.group_id
                WHERE 
                    li.schedule_lesson_day == ('%s') AND li.schedule_lesson_month == ('%s') AND schedule_course == ('%d') AND schedule_platoon == ('%s') AND schedule_group == ('%s')
                ORDER BY 
                    li.schedule_lesson_month, 
                    li.schedule_lesson_time;
            '''
                              % (str(tomorrow_day), str(tomorrow_month), int(help_course), str(help_platoon), str(input_group)))
            lessons_tomorrow = cursor_db.fetchall()

            connection_to_db_main.commit()
            cursor_db.close()
            connection_to_db_main.close()

            lessons_count = 1
            info_lessons = (
                f'{days_week_to_emoji[datetime.now().weekday()]} <i><b><u>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</u></b></i>, {num_to_emoji(str(now_day))}.{num_to_emoji(str(now_month))}, {days_week[datetime.now().weekday()]}, '
                f'<i><b><u>–¥–ª—è</u></b></i> {num_to_emoji(str(help_course))}<i><b><u>–≥–æ –∫—É—Ä—Å–∞</u></b></i> {num_to_emoji(str(help_platoon).split(" ")[0])}-{num_to_emoji(str(input_group).split("/")[-1])}<i><b><u>–≥–æ –≤–∑–≤–æ–¥–∞:</u></b></i>\n\n')
            if lessons_today:
                for current_lesson in lessons_today:
                    info_lessons += (f'{num_to_emoji(str(lessons_count))} üï∞ \t{current_lesson[0]} üï∞\n'
                                     f'üéì \t<b>{current_lesson[1]}</b>\n'
                                     f'üî¨ \t{current_lesson[2]} / üë® {current_lesson[3]}\n'
                                     f'üö™ \t{current_lesson[4]}\n\n')
                    lessons_count += 1
                lessons_count = 1
            else:
                info_lessons += 'üßß –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏—è—Ö!\n\n'

            info_lessons += '\n'

            info_lessons += (
                f'{days_week_to_emoji[(datetime.now() + timedelta(days=1)).weekday()]} <i><b><u>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</u></b></i>, {num_to_emoji(str(tomorrow_day))}.{num_to_emoji(str(tomorrow_month))}, {days_week[(datetime.now() + timedelta(days=1)).weekday()]}, '
                f'<i><b><u>–¥–ª—è</u></b></i> {num_to_emoji(str(help_course))}<i><b><u>–≥–æ –∫—É—Ä—Å–∞</u></b></i> {num_to_emoji(str(help_platoon).split(" ")[0])}-{num_to_emoji(str(input_group).split("/")[-1])}<i><b><u>–≥–æ –≤–∑–≤–æ–¥–∞:</u></b></i>\n\n')
            if lessons_tomorrow:
                for current_lesson in lessons_tomorrow:
                    info_lessons += (f'{num_to_emoji(str(lessons_count))} üï∞ \t{current_lesson[0]} üï∞\n'
                                     f'üéì \t<b>{current_lesson[1]}</b>\n'
                                     f'üî¨ \t{current_lesson[2]} / üë® {current_lesson[3]}\n'
                                     f'üö™ \t{current_lesson[4]}\n\n')
                    lessons_count += 1
            else:
                info_lessons += 'üßß –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏—è—Ö!\n\n'

            bot.send_message(chat_id=chat_id,
                             text=info_lessons,
                             parse_mode='html')
            return check_schedule_platoon(message=message, help_course=help_course, help_platoon=help_platoon,
                                               list_platoon=[], func_input_type='back', process_index=process_index)
        elif process_index == 2:
            if len(schedule.get_jobs()) == 0:
                schedule.every().day.at(send_time).do(subscribe_to_schedule, help_course=help_course, help_platoon=help_platoon,
                                                      help_group=message.text, chat_id=chat_id)
                Thread(target=schedule_checker).start()
                user = users[chat_id]
                user.is_subscribe_to_schedule = True
                delete_reply_markup(message=message)
                bot.send_message(chat_id=chat_id,
                                 text=f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –¥–ª—è {help_course}–≥–æ –∫—É—Ä—Å–∞ {help_platoon}/{message.text}–≥–æ –≤–∑–≤–æ–¥–∞.')
                return command_schedule(message=message, do_edit_message=False)

    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        return check_schedule_course(message, help_course=help_course, list_kurs=[], func_input_type='back',
                                          process_index=process_index)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text in command_list:
        return all_commands(message=message)
    else:
        bot.send_message(chat_id=chat_id,
                         text=f'‚Ñπ –ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: ',
                         reply_markup=links_without_button_back())
        bot.register_next_step_handler(message, check_schedule_group, help_course=help_course, help_platoon=help_platoon,
                                       list_group=list_group, process_index=process_index)


# —Ä–∞–∑–¥–µ–ª "–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
def command_all(message, do_edit_message=False, process_index=1):
    chat_id = message.chat.id

    with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db_main:
        cursor_db = connection_to_db_main.cursor()
    cursor_db.execute('''
        SELECT 
            course 
        FROM 
            cadets 
        GROUP BY 
            course 
        ORDER BY 
            course;
    ''')
    list_kurs_from_users = cursor_db.fetchall()
    connection_to_db_main.commit()
    cursor_db.close()
    connection_to_db_main.close()

    button_course = []
    help_list = []
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True,
                                       row_width=5,
                                       input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å...')
    for current_button in list_kurs_from_users:
        button_course.append(types.KeyboardButton(text=str(current_button[0])))
        help_list.append(str(current_button[0]))
    markup.add(*button_course)
    if process_index == 1:
        markup.add(types.KeyboardButton(text='üçâ –ó–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç'))
    if (process_index == 1) or (process_index == 2):
        markup.add(types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    else:
        markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))

    if do_edit_message:
        bot.delete_message(chat_id=chat_id,
                           message_id=bot.edit_message_text(chat_id=chat_id,
                                                            message_id=message.message_id,
                                                            text='‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...',
                                                            parse_mode='html').message_id)
        bot.send_message(chat_id=chat_id,
                         text=f'{process_index_to_emogi[0][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–ö–£–†–°–ê–ú</b></u>: ',
                         parse_mode='html',
                         reply_markup=markup)

    else:
        bot.reply_to(message=message,
                     text=f'{process_index_to_emogi[0][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–ö–£–†–°–ê–ú</b></u>: ',
                     parse_mode='html',
                     reply_markup=markup)

    bot.register_next_step_handler(message, check_course, list_kurs=help_list,
                                   process_index=process_index)


# –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
def check_course(message, help_course=None, list_kurs=None, func_input_type=None, process_index=1):
    chat_id = message.chat.id

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (message.text in list_kurs) or (func_input_type == 'back'):
        if func_input_type != 'back':
            help_course = message.text
        with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db_main:
            cursor_db = connection_to_db_main.cursor()
        cursor_db.execute('''
            SELECT 
                platoon 
            FROM 
                cadets 
            WHERE 
                course == ('%d') 
            GROUP BY 
                platoon 
            ORDER BY 
                platoon;
        '''
                          % (int(help_course)))
        list_platoon_from_users = cursor_db.fetchall()
        connection_to_db_main.commit()
        cursor_db.close()
        connection_to_db_main.close()

        button_platoon = []
        help_list = []
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=5,
                                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∑–≤–æ–¥...')
        for current_button in list_platoon_from_users:
            button_platoon.append(types.KeyboardButton(text=str(current_button[0])))
            help_list.append(str(current_button[0]))
        markup.add(*button_platoon)
        if process_index == 1:
            markup.add(types.KeyboardButton(text='üçç –ó–∞ –∫—É—Ä—Å'))
        elif process_index == 3:
            markup.add(types.KeyboardButton(text='üçç –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å'))
        markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.reply_to(message=message,
                     text=f'{process_index_to_emogi[0][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–í–ó–í–û–î–ê–ú</b></u>: ',
                     reply_markup=markup,
                     parse_mode='html')

        bot.register_next_step_handler(message, check_platoon, help_course=help_course,
                                       list_platoon=help_list, process_index=process_index)
    elif message.text == 'üçâ –ó–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç' and process_index == 1:
        return create_all_buttons(message=message, choice_info='faculty')
    elif (message.text == 'üîô –ù–∞–∑–∞–¥') and ((process_index == 3) or (process_index == 4)):
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö...')
        return update_students(message=message, do_edit_message=False)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text in command_list:
        return all_commands(message=message)
    else:
        bot.send_message(chat_id=chat_id,
                         text=f'‚Ñπ –ö—É—Ä—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: ',
                         reply_markup=links_without_button_back())
        bot.register_next_step_handler(message, check_course, list_kurs=list_kurs,
                                       process_index=process_index)


# –≤—ã–±–æ—Ä –≤–∑–≤–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
def check_platoon(message, help_course=None, help_platoon=None, list_platoon=None, func_input_type=None,
                                     process_index=1):
    chat_id = message.chat.id

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (message.text in list_platoon) or (func_input_type == 'back'):
        if func_input_type != 'back':
            help_platoon = message.text
        if process_index == 1:
            return create_all_buttons(message=message, help_course=help_course, help_platoon=help_platoon, choice_info='platoon')
        elif (process_index == 2) or (process_index == 3) or (process_index == 4):
            # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db_main:
                cursor_db = connection_to_db_main.cursor()
            cursor_db.execute('''
                SELECT 
                    cadet 
                FROM 
                    cadets 
                WHERE 
                    course == ('%d') AND platoon == ('%d') 
                GROUP BY 
                    cadet 
                ORDER BY 
                    cadet;
            '''
                              % (int(help_course), int(help_platoon)))
            list_man_from_users = cursor_db.fetchall()
            connection_to_db_main.commit()
            cursor_db.close()
            connection_to_db_main.close()

            button_man = []
            help_list = []
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               row_width=3,
                                               input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –∫—É—Ä—Å–∞–Ω—Ç–∞...')
            for current_button in list_man_from_users:
                button_man.append(types.KeyboardButton(text=str(current_button[0])))
                help_list.append(str(current_button[0]))
            markup.add(*button_man)
            if process_index == 3:
                markup.add(types.KeyboardButton(text='üçà –£–¥–∞–ª–∏—Ç—å –≤–∑–≤–æ–¥'))
            markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

            bot.reply_to(message=message,
                         text=f'{process_index_to_emogi[0][process_index - 1]} –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–ªe–¥—É—é—â–∏–º <u><b>–ö–£–†–°–ê–ù–¢–ê–ú</b></u>: ',
                         reply_markup=markup,
                         parse_mode='html')

            bot.register_next_step_handler(message, check_cadet, help_course=help_course, help_platoon=help_platoon,
                                           list_man=help_list, process_index=process_index)
    elif message.text == 'üçç –ó–∞ –∫—É—Ä—Å' and process_index == 1:
        return create_all_buttons(message=message, help_course=help_course, choice_info='course')
    elif message.text == 'üçç –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å' and process_index == 3:
        return delete_cadet_first(message=message, help_course=help_course)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        return command_all(message, do_edit_message=False, process_index=process_index)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text in command_list:
        return all_commands(message=message)
    else:
        bot.send_message(chat_id=chat_id,
                         text=f'‚Ñπ –í–∑–≤–æ–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: ',
                         reply_markup=links_without_button_back())
        bot.register_next_step_handler(message, check_platoon, help_course=help_course,
                                       list_platoon=list_platoon, process_index=process_index)


def check_cadet(message, help_course=None, help_platoon=None, help_cadet=None, list_man=None, func_input_type=None, process_index=1):
    chat_id = message.chat.id

    if (message.text in list_man) or (func_input_type == 'back'):
        if func_input_type != 'back':
            help_cadet = message.text
        if process_index == 2:
            return create_add_cadet_buttons(message=message, help_course=help_course, help_platoon=help_platoon,
                                            help_cadet=help_cadet)
        elif process_index == 3:
            return delete_cadet_first(message=message, help_course=help_course, help_platoon=help_platoon,
                                      help_cadet=help_cadet)
        elif process_index == 4:
            return command_update_cadet(message=message, help_course=help_course, help_platoon=help_platoon,
                                      help_cadet=help_cadet)
    elif (message.text == 'üçà –£–¥–∞–ª–∏—Ç—å –≤–∑–≤–æ–¥') and (process_index == 3):
        return delete_cadet_first(message=message, help_course=help_course, help_platoon=help_platoon)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        return check_course(message, help_course=help_course, list_kurs=[], func_input_type='back',
                                            process_index=process_index)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text in command_list:
        return all_commands(message=message)
    else:
        bot.send_message(chat_id=chat_id,
                         text=f'‚Ñπ –ö—É—Ä—Å–∞–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é: ',
                         reply_markup=links_without_button_back())
        bot.register_next_step_handler(message, check_cadet, help_course=help_course, help_platoon=help_platoon,
                                       list_man=list_man, process_index=process_index)


def command_update_cadet(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id
    users[chat_id].data_set.clear()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True,
                                       row_width=2,
                                       input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...')
    markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

    bot.reply_to(message=message,
                 text=f'üë§ –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å–∞–Ω—Ç <u><i>{help_course}</i></u>–≥–æ –∫—É—Ä—Å–∞ <u><i>{help_platoon}</i></u>–≥–æ –≤–∑–≤–æ–¥–∞ <u><i>{help_cadet}</i></u>.\n\n'
                      f''
                      f'{update_student_rules}',
                 parse_mode='html',
                 reply_markup=markup)

    bot.register_next_step_handler(message, update_cadet_check, help_course=help_course, help_platoon=help_platoon, help_cadet=help_cadet)


def update_cadet_check(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id

    if message.text in command_list:
        return all_commands(message=message)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        return check_platoon(message, help_course=help_course, help_platoon=help_platoon, list_platoon=[], func_input_type='back', process_index=4)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text:
        info = ''

        " ".join(message.text.split(' ')).strip()
        info_about_student = [x for x in message.text.split(' ') if x]
        if len(info_about_student) == 6:
            error_info = ''
            help_list = []

            if (len(info_about_student[0].lstrip('0')) == 1) and info_about_student[0].isdigit():
                help_list.append(int(info_about_student[0].lstrip('0')))  # int
            else:
                error_info += error_add_student[0]

            if ((len(info_about_student[1].lstrip('0')) >= 3) and (len(info_about_student[1].lstrip('0')) <= 4)
                    and (info_about_student[1][-1] != '0') and info_about_student[1].isdigit()):
                help_list.append(int(info_about_student[1].lstrip('0')))  # int
            else:
                error_info += error_add_student[1]

            if (len(info_about_student[2]) >= 2) and (len(info_about_student[3]) >= 2) and (
                    info_about_student[2][0] not in denied_symbols) and (
                    info_about_student[3][0] not in denied_symbols):
                help_list.append(info_about_student[2] + ' ' + info_about_student[3])  # str
            else:
                error_info += error_add_student[2]

            if info_about_student[4] == '_':
                help_list.append(default_cadet_value)  # int
            elif info_about_student[4].isdigit():
                if int(info_about_student[4]) in range(1, 3000):
                    help_list.append(int(info_about_student[4]))  # int
            else:
                error_info += error_add_student[3]

            if info_about_student[5] == '_':
                help_list.append(default_cadet_value)  # int
            elif info_about_student[5].isdigit():
                if int(info_about_student[5]) in range(1, 3000):
                    help_list.append(int(info_about_student[5]))  # int
            else:
                error_info += error_add_student[4]

            if len(help_list) == 5:
                with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
                    cursor_db = connection_to_db.cursor()

                cursor_db.execute('''
                    SELECT 
                        c.course,
                        c.platoon,
                        c.cadet,
                        p.grade,
                        p.discipline 
                    FROM 
                        cadets AS c
                    LEFT OUTER JOIN
                        parameters AS p
                    ON
                        c.student_id = p.student_id
                    WHERE 
                        course == ('%d') AND platoon == ('%d') AND cadet == ('%s');
                '''
                                  % (int(help_course), int(help_platoon), str(help_cadet)))
                user_from_db = cursor_db.fetchone()
                connection_to_db.commit()
                cursor_db.close()
                connection_to_db.close()

                users[chat_id].data_set = help_list
                info += (f'–ö—É—Ä—Å\n'
                         f'\t‚îî <u><b>{user_from_db[0]}</b></u>–π ‚û° <u><b>{help_list[0]}</b></u>–π\n'
                         f'–í–∑–≤–æ–¥\n'
                         f'\t‚îî <u><b>{user_from_db[1]}</b></u>–π ‚û° <u><b>{help_list[1]}</b></u>–π\n'
                         f'–ö—É—Ä—Å–∞–Ω—Ç\n'
                         f'\t‚îî <u><b>{user_from_db[2]}</b></u> ‚û° <u><b>{help_list[2]}</b></u>\n'
                         f'–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å\n'
                         f'\t‚îî <u><b>{user_from_db[3]}</b></u> ‚û° <u><b>{help_list[3]}</b></u>\n'
                         f'–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n'
                         f'\t‚îî <u><b>{user_from_db[4]}</b></u> ‚û° <u><b>{help_list[4]}</b></u>\n')
            else:
                info += (
                    f'–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è (<u>{info_about_student[2]} {info_about_student[3]} ({info_about_student[0]}, {info_about_student[1]}</u>)):\n'
                    f'<b>{error_info}</b>\n')
        elif len(info_about_student) < 6:
            info += '–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –ø–æ–ª—è!\n\n'
        else:
            info += '–£–∫–∞–∑–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!\n\n'

        if users[chat_id].data_set:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               row_width=2,
                                               input_field_placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å?')
            markup.add(types.KeyboardButton(text='‚úî –û–±–Ω–æ–≤–∏—Ç—å'), types.KeyboardButton(text='‚ùå –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å'))

            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n\n'
                                  f''
                                  f'{info}'
                                  f''
                                  f'–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?',
                             parse_mode='html',
                             reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               row_width=2,
                                               input_field_placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å?')
            markup.add(types.KeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

            bot.send_message(chat_id=chat_id,
                             text=f'{info}\n'
                                  f''
                                  f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?',
                             parse_mode='html',
                             reply_markup=markup)

        bot.register_next_step_handler(message, do_update_cadet, help_course=help_course, help_platoon=help_platoon, help_cadet=help_cadet)

    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å?')
        markup.add(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
                         parse_mode='html',
                         reply_markup=markup)

        bot.register_next_step_handler(message, update_cadet_check, help_course=help_course, help_platoon=help_platoon,
                                       help_cadet=help_cadet)


def do_update_cadet(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id

    if message.text in command_list:
        users[chat_id].data_set.clear()
        return all_commands(message=message)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        users[chat_id].data_set.clear()
        return check_platoon(message, help_course=help_course, help_platoon=help_platoon, list_platoon=[], func_input_type='back', process_index=4)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        users[chat_id].data_set.clear()
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text == '‚úî –û–±–Ω–æ–≤–∏—Ç—å':
        with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()
        cursor_db.execute('''
            UPDATE
                parameters
            SET
                grade = ('%d'),
                discipline = ('%d')
            WHERE
                student_id == (
                    SELECT
                        student_id
                    FROM
                        cadets
                    WHERE
                        course == ('%d') AND platoon == ('%d') AND cadet == ('%s')
                );
        '''
                          % (int(users[chat_id].data_set[3]), int(users[chat_id].data_set[4]),
                             int(help_course), int(help_platoon), str(help_cadet)))
        cursor_db.execute('''
            UPDATE
                cadets
            SET
                course = ('%d'),
                platoon = ('%d'),
                cadet = ('%s')
            WHERE 
                course == ('%d') AND platoon == ('%d') AND cadet == ('%s');
        '''
                          % (int(users[chat_id].data_set[0]), int(users[chat_id].data_set[1]), str(users[chat_id].data_set[2]),
                             int(help_course), int(help_platoon), str(help_cadet)))
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        users[chat_id].data_set.clear()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–û–±–Ω–æ–≤–∏—Ç—å?')
        markup.add(types.KeyboardButton(text='üîÅ –û–±–Ω–æ–≤–∏—Ç—å'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
        bot.send_message(chat_id=chat_id,
                         text='‚úî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö?',
                         parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, do_update_cadet_after_input, help_course=help_course,
                                       help_platoon=help_platoon, help_cadet=help_cadet)
    elif message.text == '‚ùå –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å':
        users[chat_id].data_set.clear()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–û–±–Ω–æ–≤–∏—Ç—å?')
        markup.add(types.KeyboardButton(text='üîÅ –û–±–Ω–æ–≤–∏—Ç—å'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
        bot.send_message(chat_id=chat_id,
                         text='‚ùå –û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö?',
                         parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, do_update_cadet_after_input, help_course=help_course,
                                       help_platoon=help_platoon, help_cadet=help_cadet)

    elif message.text == 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å':
        users[chat_id].data_set.clear()
        return command_update_cadet(message=message, help_course=help_course, help_platoon=help_platoon,
                                    help_cadet=help_cadet)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
                         parse_mode='html')

        bot.register_next_step_handler(message, do_update_cadet, help_course=help_course, help_platoon=help_platoon, help_cadet=help_cadet)


def do_update_cadet_after_input(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id

    if message.text in command_list:
        return all_commands(message=message)
    elif message.text == 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å':
        return check_platoon(message, help_course=help_course, help_platoon=help_platoon, list_platoon=[],
                             func_input_type='back', process_index=4)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–û–±–Ω–æ–≤–∏—Ç—å?')
        markup.add(types.KeyboardButton(text='üîÅ –û–±–Ω–æ–≤–∏—Ç—å'), types.KeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
                         parse_mode='html',
                         reply_markup=markup)

        bot.register_next_step_handler(message, do_update_cadet_after_input, help_course=help_course, help_platoon=help_platoon,
                                           help_cadet=help_cadet)


def delete_cadet_first(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id

    info = ''
    if help_cadet:
        info = (f'‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞–Ω—Ç–µ\n'
                f'<u>{help_course}</u>–≥–æ –∫—É—Ä—Å–∞\n'
                f'<u>{help_platoon}</u>–≥–æ –≤–∑–≤–æ–¥–∞\n'
                f'<u>{help_cadet.upper()}</u>?')
    elif help_platoon:
        info = (f'‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ\n'
                f'<u>{help_platoon}</u>–º –≤–∑–≤–æ–¥–µ\n'
                f'<u>{help_course}</u>–≥–æ –∫—É—Ä—Å–∞?')
    elif help_course:
        info = (f'‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \n'
                f'<u>{help_course}</u>–º –∫—É—Ä—Å–µ?')
    info += '\n\n‚ùï –û—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç <u><b>–ù–ï–í–û–ó–ú–û–ñ–ù–û</b></u> ‚ùï'

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True,
                                       row_width=2,
                                       input_field_placeholder='–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?')

    markup.add(types.KeyboardButton('üîö –ù–µ —É–¥–∞–ª—è—Ç—å'), types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å'))
    markup.add(types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    bot.send_message(chat_id=chat_id,
                     text=info,
                     reply_markup=markup,
                     parse_mode='html')
    bot.register_next_step_handler(message, delete_cadet_second, help_course=help_course, help_platoon=help_platoon,
                                   help_cadet=help_cadet)


def delete_cadet_second(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id

    info = ''
    if help_cadet:
        info = (f'‚ùì –í—ã –ê–ë–°–û–õ–Æ–¢–ù–û –£–í–ï–†–ï–ù–´, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞–Ω—Ç–µ\n'
                f'<u>{help_course}</u>–≥–æ –∫—É—Ä—Å–∞\n'
                f'<u>{help_platoon}</u>–≥–æ –≤–∑–≤–æ–¥–∞\n'
                f'<u>{help_cadet.upper()}</u>?')
    elif help_platoon:
        info = (f'‚ùì –í—ã –ê–ë–°–û–õ–Æ–¢–ù–û –£–í–ï–†–ï–ù–´, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ\n'
                f'<u>{help_platoon}</u>–º –≤–∑–≤–æ–¥–µ\n'
                f'<u>{help_course}</u>–≥–æ –∫—É—Ä—Å–∞?')
    elif help_course:
        info = (f'‚ùì –í—ã –ê–ë–°–û–õ–Æ–¢–ù–û –£–í–ï–†–ï–ù–´, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \n'
                f'<u>{help_course}</u>–º –∫—É—Ä—Å–µ?')
    info += '\n\n‚ùï –û—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¢–ï–ü–ï–†–¨ –±—É–¥–µ—Ç <u><b>–ù–ï–í–û–ó–ú–û–ñ–ù–û</b></u> ‚ùï'

    if message.text == 'üóë –£–¥–∞–ª–∏—Ç—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–í—ã —É–≤–µ—Ä–µ–Ω—ã?')
        markup.add(types.KeyboardButton('üîö –ù–ï –£–î–ê–õ–Ø–¢–¨!'), types.KeyboardButton('üóë –£–≤–µ—Ä–µ–Ω, —É–¥–∞–ª–∏—Ç—å!'))
        markup.add(types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
        bot.send_message(chat_id=chat_id,
                         text=info,
                         reply_markup=markup,
                         parse_mode='html')
        bot.register_next_step_handler(message, apply_to_delete_cadet, help_course=help_course, help_platoon=help_platoon, help_cadet=help_cadet)
    elif message.text in command_list:
        return all_commands(message=message)
    elif message.text == 'üîö –ù–µ —É–¥–∞–ª—è—Ç—å':
        if help_platoon:
            return check_platoon(message, help_course=help_course, help_platoon=help_platoon, list_platoon=[], func_input_type='back', process_index=3)
        elif help_course:
            return check_course(message, help_course=help_course, list_kurs=[], func_input_type='back', process_index=3)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!')
        return delete_cadet_first(message=message, help_course=help_course, help_platoon=help_platoon, help_cadet=help_cadet)


def apply_to_delete_cadet(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id

    if message.text == 'üóë –£–≤–µ—Ä–µ–Ω, —É–¥–∞–ª–∏—Ç—å!':
        if help_platoon:
            with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
                cursor_db = connection_to_db.cursor()
            if help_cadet:
                cursor_db.execute('''
                    DELETE FROM 
                        parameters
                    WHERE 
                        student_id == 
                            (SELECT
                                student_id
                            FROM
                                cadets
                            WHERE
                                course == {course} AND platoon == {platoon} AND cadet == '{cadet}');
                '''
                                  .format(course=int(help_course),
                                          platoon=int(help_platoon),
                                          cadet=str(help_cadet)))

                cursor_db.execute('''
                    DELETE FROM 
                        cadets
                    WHERE 
                        course == {course} AND platoon == {platoon} AND cadet == '{cadet}';
                '''
                                  .format(course=int(help_course),
                                          platoon=int(help_platoon),
                                          cadet=str(help_cadet)))

                connection_to_db.commit()
                cursor_db.close()
                connection_to_db.close()

                bot.send_message(chat_id=chat_id,
                                 text=f'üöÆ –î–∞–Ω–Ω—ã–µ –æ <u>{help_cadet.upper()}</u> —É–¥–∞–ª–µ–Ω—ã!',
                                 parse_mode='html')

                return check_platoon(message, help_course=help_course, help_platoon=help_platoon,
                                                        list_platoon=[], func_input_type='back', process_index=3)
            else:
                cursor_db.execute('''
                    DELETE FROM 
                        parameters
                    WHERE 
                        student_id == (
                            SELECT
                                student_id
                            FROM
                                cadets
                            WHERE
                                course == {course} AND platoon == {platoon});
                '''
                                  .format(course=int(help_course),
                                          platoon=int(help_platoon)))
                cursor_db.execute('''
                    DELETE FROM 
                        cadets 
                    WHERE 
                        course == ('%d') AND platoon == ('%d');
                '''
                                  % (int(help_course), int(help_platoon)))
                connection_to_db.commit()
                cursor_db.close()
                connection_to_db.close()

                bot.send_message(chat_id=chat_id,
                                 text=f'üöÆ –î–∞–Ω–Ω—ã–µ –æ <u>{help_platoon}</u>–º –≤–∑–≤–æ–¥–µ —É–¥–∞–ª–µ–Ω—ã!',
                                 parse_mode='html')

                return check_course(message, help_course=help_course, list_kurs=[], func_input_type='back',
                                                    process_index=3)

        elif help_course:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               row_width=2,
                                               input_field_placeholder='–¢–æ—á–Ω–æ?')
            markup.add(types.KeyboardButton('üîö –ù–µ —É–¥–∞–ª—è—Ç—å'), types.KeyboardButton('üóë –¢–û–ß–ù–û!!!'))
            markup.add(types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚Åâ –í—ã <u><b>–ê–ë–°–û–õ–Æ–¢–ù–û –¢–û–ß–ù–û –£–í–ï–†–ï–ù–´</b></u>, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <u><b>–£–î–ê–õ–ò–¢–¨</b></u> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ \n'
                                  f'<u>{help_course}</u>–º –∫—É—Ä—Å–µ?\n\n'
                                  f''
                                  f'‚Äº –û—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ <u><b>–¢–ï–ü–ï–†–¨ –¢–û–ß–ù–û</b></u> –±—É–¥–µ—Ç <u><b>–ù–ï–í–û–ó–ú–û–ñ–ù–û</b></u> ‚Äº',
                             reply_markup=markup,
                             parse_mode='html')
            bot.register_next_step_handler(message, apply_to_delete_course, help_course=help_course)
    elif message.text in command_list:
        return all_commands(message=message)
    elif message.text == 'üîö –ù–ï –£–î–ê–õ–Ø–¢–¨!':
        if help_platoon:
            return check_platoon(message, help_course=help_course, help_platoon=help_platoon, list_platoon=[], func_input_type='back', process_index=3)
        elif help_course:
            return check_course(message, help_course=help_course, list_kurs=[], func_input_type='back', process_index=3)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!')
        bot.register_next_step_handler(message, apply_to_delete_cadet, help_course=help_course, help_platoon=help_platoon, help_cadet=help_cadet)


def apply_to_delete_course(message, help_course=None):
    chat_id = message.chat.id

    if message.text == 'üóë –¢–û–ß–ù–û!!!':
        with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()

        cursor_db.execute('''
            DELETE FROM 
                parameters
            WHERE 
                student_id == (
                    SELECT
                        student_id
                    FROM
                        cadets
                    WHERE
                        course == {course});
        '''
                          .format(course=int(help_course)))
        cursor_db.execute('''
            DELETE FROM 
                cadets 
            WHERE 
                course == ('%d');
        '''
                          % int(help_course))
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        bot.send_message(chat_id=chat_id,
                         text=f'üöÆ –î–∞–Ω–Ω—ã–µ –æ <u>{help_course}</u>–º –∫—É—Ä—Å–µ —É–¥–∞–ª–µ–Ω—ã!',
                         parse_mode='html')
        return command_all(message=message, do_edit_message=False, process_index=3)
    elif message.text in command_list:
        return all_commands(message=message)
    elif message.text == 'üîö –ù–µ —É–¥–∞–ª—è—Ç—å':
        return check_course(message, help_course=help_course, list_kurs=[], func_input_type='back', process_index=3)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!')
        bot.register_next_step_handler(message, apply_to_delete_course, help_course=help_course)


def create_add_cadet_buttons(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True,
                                       row_width=2,
                                       input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥...')
    markup.add(types.KeyboardButton('üéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å'), types.KeyboardButton('üö® –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'))
    markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    markup.add(types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    bot.send_message(chat_id=chat_id,
                     text=f'–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ <u><b>{str(help_cadet).upper()}</b></u>.',
                     reply_markup=markup,
                     parse_mode='html')
    bot.register_next_step_handler(message, add_info_about_cadet, help_course=help_course, help_platoon=help_platoon,
                                   help_cadet=help_cadet)


# –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É
def add_info_about_cadet(message, help_course=None, help_platoon=None, help_cadet=None):
    chat_id = message.chat.id
    with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
        cursor_db = connection_to_db.cursor()
    if (message.text == 'üéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å') or (message.text == 'üö® –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'):
        if message.text == 'üéì –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å':
            msg = bot.send_message(chat_id=chat_id,
                                   text='–î–æ–±–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...')
            cursor_db.execute('''
                UPDATE 
                    parameters 
                SET 
                    grade = grade + 10, 
                    last_change = '–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å (+10)' 
                WHERE 
                    student_id == (
                        SELECT
                            student_id
                        FROM
                            cadets
                        WHERE
                            course == {course} AND platoon == {platoon} AND cadet == '{cadet}');
            '''
                              .format(course=int(help_course),
                                      platoon=int(help_platoon),
                                      cadet=str(help_cadet)))
            cursor_db.execute('''
                SELECT 
                    c.cadet, 
                    p.grade, 
                    p.discipline 
                FROM 
                    cadets AS c
                LEFT OUTER JOIN
                    parameters AS p
                ON
                    p.student_id = c.student_id
                WHERE 
                    c.course == {course} AND c.platoon == {platoon} AND c.cadet == '{cadet}';
            '''
                              .format(course=int(help_course),
                                      platoon=int(help_platoon),
                                      cadet=str(help_cadet)))
            users = cursor_db.fetchone()
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=msg.message_id,
                                  text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ <u>—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</u> –∫—É—Ä—Å–∞–Ω—Ç–∞ <u>{help_cadet}</u> <i>(+10)</i> –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
                                       f''
                                       f'<b>–ò–º—è</b>: <u>{users[0]}</u>\n'
                                       f'<b>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>: <u>{users[1]}</u>\n'
                                       f'<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</b>: <u>{users[2]}</u>',
                                  parse_mode='html')

        elif message.text == 'üö® –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞':
            msg = bot.send_message(chat_id=chat_id,
                                   text='–î–æ–±–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...')
            cursor_db.execute('''
                UPDATE 
                    parameters 
                SET 
                    discipline = discipline - 10, 
                    last_change = '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ (-10)' 
                WHERE 
                    student_id == (
                        SELECT
                            student_id
                        FROM
                            cadets
                        WHERE
                            course == {course} AND platoon == {platoon} AND cadet == '{cadet}');
            '''
                              .format(course=int(help_course),
                                      platoon=int(help_platoon),
                                      cadet=str(help_cadet)))

            cursor_db.execute('''
                SELECT 
                    c.cadet, 
                    p.grade, 
                    p.discipline 
                FROM 
                    cadets AS c
                LEFT OUTER JOIN
                    parameters AS p
                ON
                    p.student_id = c.student_id
                WHERE 
                    c.course == {course} AND c.platoon == {platoon} AND c.cadet == '{cadet}';
            '''
                              .format(course=int(help_course),
                                      platoon=int(help_platoon),
                                      cadet=str(help_cadet)))
            users = cursor_db.fetchone()
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=msg.message_id,
                                  text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <u>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ</u> –∫—É—Ä—Å–∞–Ω—Ç–∞ <u>{help_cadet}</u> <i>(-10)</i> –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
                                       f''
                                       f'<b>–ò–º—è</b>: <u>{users[0]}</u>\n'
                                       f'<b>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>: <u>{users[1]}</u>\n'
                                       f'<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</b>: <u>{users[2]}</u>',
                                  parse_mode='html')
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        return create_add_cadet_buttons(message=message, help_course=help_course, help_platoon=help_platoon, help_cadet=help_cadet)

    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        return check_platoon(message, help_course=help_course, help_platoon=help_platoon, list_platoon=[],
                                                func_input_type='back', process_index=2)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    elif message.text in command_list:
        return all_commands(message=message)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üè† <b>–ù–∞ –≥–ª–∞–≤–Ω—É—é</b>\" –∏–ª–∏ \"üîô <b>–ù–∞–∑–∞–¥</b>\".',
                         reply_markup=links_without_button_back(),
                         parse_mode='html')
        bot.register_next_step_handler(message, add_info_about_cadet, help_course=help_course, help_platoon=help_platoon,
                                       help_cadet=help_cadet)


# –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
def create_all_buttons(message, help_course=None, help_platoon=None, choice_info='faculty'):
    chat_id = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True,
                                       row_width=2,
                                       input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥...')
    if choice_info == 'faculty':
        markup.add(types.KeyboardButton('üí¨ –í —á–∞—Ç–µ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'), types.KeyboardButton('üìÉ –í Excel —Ç–∞–±–ª–∏—Ü–µ'))
    else:
        markup.add(types.KeyboardButton('üí¨ –í —á–∞—Ç–µ'), types.KeyboardButton('üìÉ –í Excel —Ç–∞–±–ª–∏—Ü–µ'))
    markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    markup.add(types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    bot.send_message(chat_id=chat_id,
                     text='‚ùì –í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –í–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?',
                     reply_markup=markup)
    bot.register_next_step_handler(message, choice_all_method, help_course=help_course, help_platoon=help_platoon,
                                   choice_info=choice_info)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
def choice_all_method(message, help_course=None, help_platoon=None, choice_info='faculty'):
    chat_id = message.chat.id

    if message.text == 'üí¨ –í —á–∞—Ç–µ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)' or message.text == 'üí¨ –í —á–∞—Ç–µ':
        return cadets_on_chat(message=message, help_course=help_course, help_platoon=help_platoon, choice_info=choice_info)
    if message.text == 'üìÉ –í Excel —Ç–∞–±–ª–∏—Ü–µ':
        return cadets_on_xlsx(message=message, help_course=help_course, help_platoon=help_platoon, choice_info=choice_info)
    if message.text == 'üîô –ù–∞–∑–∞–¥' and choice_info == 'faculty':
        return command_all(message=message, do_edit_message=False, process_index=1)
    if message.text == 'üîô –ù–∞–∑–∞–¥' and choice_info == 'course':
        return check_course(message=message, help_course=help_course, list_kurs=[], func_input_type='back',
                                            process_index=1)
    if message.text == 'üîô –ù–∞–∑–∞–¥' and choice_info == 'platoon':
        return check_course(message=message, help_course=help_course, list_kurs=[], func_input_type='back',
                                            process_index=1)
    if message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message)
    if message.text in command_list:
        return all_commands(message=message)

    bot.send_message(chat_id=chat_id,
                     text='‚Ñπ –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üè† <b>–ù–∞ –≥–ª–∞–≤–Ω—É—é</b>\" –∏–ª–∏ \"üîô <b>–ù–∞–∑–∞–¥</b>\".',
                     parse_mode='html')
    bot.register_next_step_handler(message, choice_all_method, help_course=help_course, help_platoon=help_platoon,
                                   choice_info=choice_info)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞–Ω—Ç–∞ –≤ —á–∞—Ç
def cadets_on_chat(message, help_course=None, help_platoon=None, choice_info='faculty'):
    chat_id = message.chat.id

    try:
        with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()

        if choice_info == 'faculty':
            cursor_db.execute('''
                SELECT 
                    c.course, 
                    c.platoon, 
                    c.cadet, 
                    p.grade, 
                    p.discipline 
                FROM 
                    cadets AS c
                LEFT OUTER JOIN
                    parameters AS p
                ON
                    c.student_id = p.student_id
                ORDER BY 
                    c.course, 
                    c.platoon, 
                    c.cadet;
            ''')
            faculty_info = cursor_db.fetchall()
            connection_to_db.commit()
            cursor_db.close()
            connection_to_db.close()

            info = ''
            for current_student in faculty_info:
                info += (f'<b>–ö—É—Ä—Å</b>: {num_to_emoji(current_student[0])}, <b>–í–∑–≤–æ–¥</b>: {num_to_emoji(current_student[1])}\n'
                         f'<b>–ò–º—è</b>: <u>{current_student[2].upper()}</u>\n'
                         f'<b>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>: {num_to_emoji(current_student[3])}, <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</b>: {num_to_emoji(current_student[4])}\n\n')
            info = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ:\n\n' + info
            info_to_chat(message=message, info=info, split_method='\n\n')

        elif choice_info == 'course':
            cursor_db.execute('''
                SELECT 
                    c.platoon, 
                    c.cadet, 
                    p.grade, 
                    p.discipline 
                FROM 
                    cadets AS c
                LEFT OUTER JOIN
                    parameters AS p
                ON
                    c.student_id = p.student_id
                WHERE
                    c.course == ('%d')
                ORDER BY 
                    c.platoon, 
                    c.cadet;
            '''
                              % (int(help_course)))
            course_info = cursor_db.fetchall()
            connection_to_db.commit()
            cursor_db.close()
            connection_to_db.close()

            info = ''
            for current_student in course_info:
                info += (f'<b>–í–∑–≤–æ–¥</b>: {num_to_emoji(current_student[0])}\n'
                         f'<b>–ò–º—è</b>: <u>{current_student[1].upper()}</u>\n'
                         f'<b>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>: {num_to_emoji(current_student[2])}, <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</b>: {num_to_emoji(current_student[3])}\n\n')

            info = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {help_course}–º –∫—É—Ä—Å–µ:\n\n' + info
            info_to_chat(message=message, info=info, split_method='\n\n')

        elif choice_info == 'platoon':
            cursor_db.execute('''
                SELECT 
                    c.cadet, 
                    p.grade, 
                    p.discipline 
                FROM 
                    cadets AS c
                LEFT OUTER JOIN
                    parameters AS p
                ON
                    c.student_id = p.student_id
                WHERE
                    c.platoon == ('%d')
                ORDER BY 
                    c.cadet;
            '''
                              % (int(help_platoon)))
            platoon_info = cursor_db.fetchall()
            connection_to_db.commit()
            cursor_db.close()
            connection_to_db.close()

            info = ''
            for current_student in platoon_info:
                info += (f'<b>–ò–º—è</b>: <u>{current_student[0].upper()}</u>\n'
                         f'<b>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</b>: {num_to_emoji(current_student[1])}, <b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</b>: {num_to_emoji(current_student[2])}\n\n')

            info = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {help_platoon}–º –≤–∑–≤–æ–¥–µ:\n\n' + info
            info_to_chat(message=message, info=info, split_method='\n\n')

        return create_all_buttons(message=message, help_course=help_course, help_platoon=help_platoon,
                                  choice_info=choice_info)

    except Exception as e:
        error_from_user(message=message, error_code=e)
        return create_all_buttons(message=message, help_course=help_course, help_platoon=help_platoon,
                                  choice_info=choice_info)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É Excel
def cadets_on_xlsx(message, help_course=None, help_platoon=None, choice_info='faculty'):
    chat_id = message.chat.id

    with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
        cursor_db = connection_to_db.cursor()

    if choice_info == 'faculty':
        bot.reply_to(message, '–°–æ–∑–¥–∞–Ω–∏–µ \".xlsx\" —Ñ–∞–π–ª–∞...')
        cursor_db.execute('''
            SELECT 
                c.course, 
                c.platoon, 
                c.cadet, 
                p.grade, 
                p.discipline,
                p.last_change
            FROM 
                cadets AS c
            LEFT OUTER JOIN
                parameters AS p
            ON
                c.student_id = p.student_id
            ORDER BY 
                c.course, 
                c.platoon, 
                c.cadet;
        ''')
        cadets_in_faculty = cursor_db.fetchall()
        help_dictionary = {'–ö—É—Ä—Å': {}, '–í–∑–≤–æ–¥': {}, '–ö—É—Ä—Å–∞–Ω—Ç': {}, '–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å': {}, '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞': {}, '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ': {}}
        count_string = 0
        for current_str_in_table in cadets_in_faculty:
            count_key = 0
            for key in help_dictionary.keys():
                help_dictionary[str(key)][str(count_string)] = current_str_in_table[int(count_key)]
                count_key += 1
            count_string += 1
        users_to_excel = pd.DataFrame(help_dictionary)
        users_to_excel.to_excel(f'–§–∞–∫—É–ª—å—Ç–µ—Ç.xlsx')
        bot.send_document(chat_id=chat_id,
                          document=open(f'–§–∞–∫—É–ª—å—Ç–µ—Ç.xlsx', 'rb'))
        os.remove(f'–§–∞–∫—É–ª—å—Ç–µ—Ç.xlsx')
    elif choice_info == 'course':
        bot.reply_to(message, '–°–æ–∑–¥–∞–Ω–∏–µ \".xlsx\" —Ñ–∞–π–ª–∞...')
        cursor_db.execute('''
            SELECT 
                c.platoon, 
                c.cadet, 
                p.grade, 
                p.discipline,
                p.last_change
            FROM 
                cadets AS c
            LEFT OUTER JOIN
                parameters AS p
            ON
                c.student_id = p.student_id
            WHERE
                c.course == ('%d')
            ORDER BY 
                c.platoon, 
                c.cadet;
        '''
                          % (int(help_course)))
        cadets_in_course = cursor_db.fetchall()
        help_dictionary = {'–í–∑–≤–æ–¥': {}, '–ö—É—Ä—Å–∞–Ω—Ç': {}, '–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å': {}, '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞': {}, '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ': {}}
        count_string = 0
        for current_str_in_table in cadets_in_course:
            count_key = 0
            for key in help_dictionary.keys():
                help_dictionary[str(key)][str(count_string)] = current_str_in_table[int(count_key)]
                count_key += 1
            count_string += 1
        users_to_excel = pd.DataFrame(help_dictionary)
        users_to_excel.to_excel(f'{help_course}_–∫—É—Ä—Å.xlsx')
        bot.send_document(chat_id=chat_id,
                          document=open(f'{help_course}_–∫—É—Ä—Å.xlsx', 'rb'))
        os.remove(f'{help_course}_–∫—É—Ä—Å.xlsx')
    elif choice_info == 'platoon':
        bot.reply_to(message, '–°–æ–∑–¥–∞–Ω–∏–µ \".xlsx\" —Ñ–∞–π–ª–∞...')
        cursor_db.execute('''
            SELECT 
                c.cadet, 
                p.grade, 
                p.discipline,
                p.last_change
            FROM 
                cadets AS c
            LEFT OUTER JOIN
                parameters AS p
            ON
                c.student_id = p.student_id
            WHERE
                c.platoon == ('%d')
            ORDER BY 
                c.cadet;
        '''
                          % (int(help_platoon)))
        cadets_in_platoon = cursor_db.fetchall()
        help_dictionary = {'–ö—É—Ä—Å–∞–Ω—Ç': {}, '–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å': {}, '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞': {}, '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ': {}}
        count_string = 0
        for current_str_in_table in cadets_in_platoon:
            count_key = 0
            for key in help_dictionary.keys():
                help_dictionary[str(key)][str(count_string)] = current_str_in_table[int(count_key)]
                count_key += 1
            count_string += 1
        users_to_excel = pd.DataFrame(help_dictionary)
        users_to_excel.to_excel(f'{help_platoon}_–≤–∑–≤–æ–¥.xlsx')
        bot.send_document(chat_id=chat_id,
                          document=open(f'{help_platoon}_–≤–∑–≤–æ–¥.xlsx', 'rb'))
        os.remove(f'{help_platoon}_–≤–∑–≤–æ–¥.xlsx')

    connection_to_db.commit()
    cursor_db.close()
    connection_to_db.close()

    return create_all_buttons(message=message, help_course=help_course, help_platoon=help_platoon,
                              choice_info=choice_info)



# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
def update_info_every_year(message):
    chat_id = message.chat.id
    with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
        cursor_db = connection_to_db.cursor()

    bot.send_message(chat_id=chat_id,
                     text='‚ùó‚ùó <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï!</b>\n'
                          '\t‚îî –ö –Ω–∞—á–∞–ª—É —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ <u>–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö</u> —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '
                          '–∫—É—Ä—Å–∞–Ω—Ç–æ–≤ <u>–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞</u>, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –≤—ã—Å—ã–ª–∞—é –í–∞–º —Ç–µ–∫—É—â–∏–µ '
                          '–¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è—é –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö.\n\n'
                          ''
                          '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å –¥–∞–Ω–Ω—ã–µ –∏, <u>–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ '
                          '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏—Ö –∑–∞–Ω–µ—Å–µ–Ω–∏–µ</u>.',
                     parse_mode='html')
    cursor_db.execute('''
        SELECT 
            c.course, 
            c.platoon, 
            c.cadet, 
            p.grade, 
            p.discipline,
            p.last_change
        FROM 
            cadets AS c
        LEFT OUTER JOIN
            parameters AS p
        ON
            c.student_id = p.student_id
        ORDER BY 
            c.course, 
            c.platoon, 
            c.cadet;
    ''')
    students = cursor_db.fetchall()
    help_dictionary = {'–ö—É—Ä—Å': {}, '–í–∑–≤–æ–¥': {}, '–ö—É—Ä—Å–∞–Ω—Ç': {}, '–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å': {}, '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞': {}, '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ': {}}
    count_string = 0
    for current_str_in_table in students:
        count_key = 0
        for key in help_dictionary.keys():
            help_dictionary[str(key)][str(count_string)] = current_str_in_table[int(count_key)]
            count_key += 1
        count_string += 1
    users_to_excel = pd.DataFrame(help_dictionary)
    users_to_excel.to_excel('–°–≤–æ–¥–Ω–∞—è_—Ç–∞–±–ª–∏—Ü–∞_–∑–∞_–≥–æ–¥_–§–ü–°–û–ò–ë.xlsx')
    bot.send_document(message.chat.id, open('–°–≤–æ–¥–Ω–∞—è_—Ç–∞–±–ª–∏—Ü–∞_–∑–∞_–≥–æ–¥_–§–ü–°–û–ò–ë.xlsx', 'rb'))
    os.remove('–°–≤–æ–¥–Ω–∞—è_—Ç–∞–±–ª–∏—Ü–∞_–∑–∞_–≥–æ–¥_–§–ü–°–û–ò–ë.xlsx')

    cursor_db.execute('''
        UPDATE
            parameters
        SET
            grade = {value},
            discipline = {value};
    '''
                      .format(value=int(default_cadet_value)))

    connection_to_db.commit()
    cursor_db.close()
    connection_to_db.close()


def command_add_cadet(message, do_edit_message=False):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='from_mainpage_to_update_students'))
    markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))

    if do_edit_message:
        bot.delete_message(chat_id=chat_id,
                           message_id=bot.edit_message_text(chat_id=chat_id,
                                                            message_id=message.message_id,
                                                            text='‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...',
                                                            parse_mode='html').message_id)
        bot.send_message(chat_id=chat_id,
                         text=add_student_rules,
                         parse_mode='html',
                         reply_markup=markup_inline)

    else:
        bot.reply_to(message=message,
                     text=add_student_rules,
                     parse_mode='html',
                     reply_markup=markup_inline)

    bot.register_next_step_handler(message, check_users_info_about_cadet)


def check_users_info_about_cadet(message):
    chat_id = message.chat.id

    try:
        if message.text in command_list:
            return all_commands(message=message)

        if len(message.text.split('\n')) > len(message.text.split('|')):
            all_students = message.text.split('\n')
        else:
            all_students = message.text.split('|')

        info = ''

        for current_student in all_students:
            " ".join(current_student.split(' ')).strip()
            info_about_student = [x for x in current_student.split(' ') if x]
            if len(info_about_student) == 6:
                error_info = ''
                help_list = []

                if (len(info_about_student[0].lstrip('0')) == 1) and info_about_student[0].isdigit():
                    help_list.append(int(info_about_student[0].lstrip('0')))  # int
                else:
                    error_info += error_add_student[0]

                if ((len(info_about_student[1].lstrip('0')) >= 3) and (len(info_about_student[1].lstrip('0')) <= 4)
                        and (info_about_student[1][-1] != '0') and info_about_student[1].isdigit()):
                    help_list.append(int(info_about_student[1].lstrip('0')))  # int
                else:
                    error_info += error_add_student[1]

                if (len(info_about_student[2]) >= 2) and (len(info_about_student[3]) >= 2) and (
                        info_about_student[2][0] not in denied_symbols) and (
                        info_about_student[3][0] not in denied_symbols):
                    help_list.append(info_about_student[2] + ' ' + info_about_student[3])  # str
                else:
                    error_info += error_add_student[2]

                if info_about_student[4] == '_':
                    help_list.append(default_cadet_value)  # int
                elif info_about_student[4].isdigit():
                    if int(info_about_student[4]) in range(1, 3000):
                        help_list.append(int(info_about_student[4]))  # int
                else:
                    error_info += error_add_student[3]

                if info_about_student[5] == '_':
                    help_list.append(default_cadet_value)  # int
                elif info_about_student[5].isdigit():
                    if int(info_about_student[5]) in range(1, 3000):
                        help_list.append(int(info_about_student[5]))  # int
                else:
                    error_info += error_add_student[4]

                if len(help_list) == 5:
                    with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
                        cursor_db = connection_to_db.cursor()

                    cursor_db.execute('''
                        SELECT 
                            COUNT(*) 
                        FROM 
                            cadets 
                        WHERE 
                            course == ('%d') AND platoon == ('%d') AND cadet == ('%s');
                    '''
                                      % (help_list[0], help_list[1], help_list[2]))
                    do_have_from_db = cursor_db.fetchone()

                    do_have_from_data_set = False
                    for current_request in users[chat_id].data_set:
                        if ((current_request[0] == help_list[0]) and (current_request[1] == help_list[1]) and
                                (current_request[2] == help_list[2])):
                            do_have_from_data_set = True
                    if not do_have_from_data_set:
                        if not do_have_from_db[0]:
                            users[chat_id].data_set.append(help_list)
                            info += f'–î–∞–Ω–Ω—ã–µ –æ <u>{help_list[2]}</u> (<i>{help_list[0]}, {help_list[1]}</i>) –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n'
                        else:
                            info += f'–ö—É—Ä—Å–∞–Ω—Ç <u>{help_list[0]}</u>–≥–æ –∫—É—Ä—Å–∞ <u>{help_list[1]}</u>–≥–æ –≤–∑–≤–æ–¥–∞ <u>{help_list[2]}</u> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n'
                    else:
                        info += f'–í—ã —É–∂–µ —É–∫–∞–∑–∞–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞–Ω—Ç–µ <u>{help_list[0]}</u>–≥–æ –∫—É—Ä—Å–∞ <u>{help_list[1]}</u>–≥–æ –≤–∑–≤–æ–¥–∞ <u>{help_list[2]}</u>.\n\n'

                    connection_to_db.commit()
                    cursor_db.close()
                    connection_to_db.close()

                else:
                    info += (
                        f'–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è (<u>{info_about_student[2]} {info_about_student[3]} ({info_about_student[0]}, {info_about_student[1]}</u>)):\n'
                        f'<b>{error_info}</b>\n')
            elif len(info_about_student) < 6:
                info += '–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –ø–æ–ª—è!\n\n'
            else:
                info += '–£–∫–∞–∑–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!\n\n'

        if users[chat_id].data_set:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚úî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='apply_to_save_add_student'))
            markup_inline.add(
                types.InlineKeyboardButton(text='‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å', callback_data='deny_to_save_add_student'))

            bot.send_message(chat_id=chat_id,
                             text=f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n'
                                  f''
                                  f'{info}'
                                  f''
                                  f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?',
                             parse_mode='html',
                             reply_markup=markup_inline)
        else:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(
                types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='from_updatestudents_to_add_student'))
            markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))

            bot.send_message(chat_id=chat_id,
                             text=f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n'
                                  f''
                                  f'{info}'
                                  f''
                                  f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?',
                             parse_mode='html',
                             reply_markup=markup_inline)

    except AttributeError:
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(
            types.InlineKeyboardButton(text='üîÅ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', callback_data='from_updatestudents_to_add_student'))
        markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))

        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?',
                         parse_mode='html',
                         reply_markup=markup_inline)
    except telebot.apihelper.ApiTelegramException:
        error_from_user(message=message, error_code='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–∞—Å—Ç—è–º–∏.')


def apply_add_student(message):
    chat_id = message.chat.id

    try:
        with sqlite3.connect('./data_bases/students.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()
        for current_cadet in users[chat_id].data_set:
            cursor_db.execute('''
                INSERT INTO 
                    cadets (
                        course, 
                        platoon, 
                        cadet) 
                VALUES ('%d', '%d', '%s');
            '''
                              % (int(current_cadet[0]), int(current_cadet[1]), str(current_cadet[2])))
            cursor_db.execute('''
                INSERT INTO 
                    parameters (
                        student_id,
                        grade, 
                        discipline) 
                VALUES (
                    (SELECT
                        student_id
                    FROM
                        cadets
                    WHERE
                        course == ('%d') AND platoon == ('%d') AND cadet == ('%s')),
                    '%d', 
                    '%d');
            '''
                              % (int(current_cadet[0]), int(current_cadet[1]), str(current_cadet[2]), int(current_cadet[3]), int(current_cadet[4])))
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        users[chat_id].data_set = []

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(
            types.InlineKeyboardButton(text='üîÅ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', callback_data='from_updatestudents_to_add_student'))
        markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))

        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text='‚úî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö?',
                              parse_mode='html',
                              reply_markup=markup_inline)
        users[chat_id].data_set.clear()

    except Exception as e:
        error_from_user(message=message, error_code=e)


def deny_add_student(message):
    chat_id = message.chat.id

    users[chat_id].data_set = []

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.add(
        types.InlineKeyboardButton(text='üîÅ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', callback_data='from_updatestudents_to_add_student'))
    markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))

    bot.edit_message_text(chat_id=chat_id,
                          message_id=message.message_id,
                          text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö?',
                          parse_mode='html',
                          reply_markup=markup_inline)
    users[chat_id].data_set.clear()


def command_update_user(message, process_index=1):
    chat_id = message.chat.id
    users[chat_id].update_user_list.clear()

    with sqlite3.connect('./data_bases/users.sqlite3') as connection_to_db:
        cursor_db = connection_to_db.cursor()
    cursor_db.execute('''
        SELECT
            user_login
        FROM
            users
    ''')
    all_users = cursor_db.fetchall()
    connection_to_db.commit()
    cursor_db.close()
    connection_to_db.close()

    help_list = []
    info = (f'üë®‚ÄçüíªüîÅ –í –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n'
            f'\t‚îÇ\n'
            f'')
    for current_user in all_users:
        help_list.append(str(current_user[0]))
        info += f'\t‚îú <code>{current_user[0]}</code>\n'
    info = info[:int(info.rfind('‚îú'))] + '‚îî' + info[int(info.rfind('‚îú')) + 1:]
    info_to_chat(message=message, info=info, split_method='\n')

    if process_index == 1:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ª–æ–≥–∏–Ω...')
        markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(chat_id=chat_id,
                         text=f'\n‚ùî –ö–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
                         parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, update_users_check_old_login, help_list=help_list)
    elif process_index == 2:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ª–æ–≥–∏–Ω...')
        markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(chat_id=chat_id,
                         text=f'\nüóë –ö–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?',
                         parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, delete_users_check_login, help_list=help_list)


def update_users_check_old_login(message, help_list=None, input_type=None):
    chat_id = message.chat.id

    if (message.text in help_list) or (input_type == 'back'):
        if input_type != 'back':
            users[chat_id].update_user_list.append(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=2,
                                           input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω...')
        markup.add(types.KeyboardButton('‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è'))
        markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(chat_id=chat_id,
                         text=f'\n‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{users[chat_id].update_user_list[0]}</b>.',
                         parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, update_users_check_new_login)
    elif message.text in command_list:
        return all_commands(message=message)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        users[chat_id].update_user_list.clear()
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
        return command_update_users(message=message, do_edit_message=False)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        users[chat_id].update_user_list.clear()
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message=message, do_edit_message=False)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.')
        bot.register_next_step_handler(message, update_users_check_old_login, help_list=help_list)


def update_users_check_new_login(message, input_type=None):
    chat_id = message.chat.id

    if ((message.text) and (is_right_string(message.text))) or (input_type == 'back'):
        with sqlite3.connect('./data_bases/users.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()
        if input_type != 'back':
            cursor_db.execute('''
                SELECT
                    COUNT(*)
                FROM
                    users
                WHERE
                    user_login == ('%s');
            '''
                              % (str(message.text)))
            count_users_for_current_login = cursor_db.fetchone()

            if count_users_for_current_login[0] != 0:
                connection_to_db.commit()
                cursor_db.close()
                connection_to_db.close()

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                   one_time_keyboard=True,
                                                   row_width=2,
                                                   input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω...')
                markup.add(types.KeyboardButton('‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è'))
                markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

                bot.send_message(chat_id=chat_id,
                                 text=f'‚ùï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n'
                                      f'–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.',
                                 parse_mode='html',
                                 reply_markup=markup)

                bot.register_next_step_handler(message, update_users_check_new_login)
            else:
                users[chat_id].update_user_list.append(message.text)
                cursor_db.execute('''
                    SELECT
                        user_password
                    FROM
                        users
                    WHERE
                        user_login == ('%s');
                '''
                                  % (str(users[chat_id].update_user_list[0])))
                current_user_password = cursor_db.fetchone()
                connection_to_db.commit()
                cursor_db.close()
                connection_to_db.close()

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                                   one_time_keyboard=True,
                                                   row_width=2,
                                                   input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å...')
                markup.add(types.KeyboardButton('‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è'))
                markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

                bot.send_message(chat_id=chat_id,
                                 text=f'‚ùï <b>–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å</b>:\n'
                                      f'\t‚îî <i>{current_user_password[0]}</i>\n\n'
                                      f''
                                      f'‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{users[chat_id].update_user_list[0]}</b>.',
                                 parse_mode='html',
                                 reply_markup=markup)
                bot.register_next_step_handler(message, update_users_check_password)
        else:
            cursor_db.execute('''
                SELECT
                    user_password
                FROM
                    users
                WHERE
                    user_login == ('%s');
            '''
                              % (str(users[chat_id].update_user_list[0])))
            current_user_password = cursor_db.fetchone()
            connection_to_db.commit()
            cursor_db.close()
            connection_to_db.close()

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                               one_time_keyboard=True,
                                               row_width=2,
                                               input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å...')
            markup.add(types.KeyboardButton('‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è'))
            markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

            bot.send_message(chat_id=chat_id,
                             text=f'‚ùï <b>–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å</b>:\n'
                                  f'\t‚îî <i>{current_user_password[0]}</i>\n\n'
                                  f''
                                  f'‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{users[chat_id].update_user_list[0]}</b>.',
                             parse_mode='html',
                             reply_markup=markup)
            bot.register_next_step_handler(message, update_users_check_password)
    elif message.text in command_list:
        users[chat_id].update_user_list.clear()
        return all_commands(message=message)
    elif message.text == '‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è':
        users[chat_id].update_user_list.append('*')
        return update_users_check_new_login(message, input_type='back')
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        users[chat_id].update_user_list.pop(-1)
        return command_update_user(message=message)
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        users[chat_id].update_user_list.clear()
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message=message, do_edit_message=False)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–æ–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, update_users_check_new_login)


def update_users_check_password(message, input_type=None):
    chat_id = message.chat.id

    if ((message.text) and (is_right_string(message.text))) or (input_type == 'back'):
        if input_type != 'back':
            users[chat_id].update_user_list.append(message.text)
        with sqlite3.connect('./data_bases/users.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()
        cursor_db.execute('''
            SELECT
                user_role
            FROM
                users
            WHERE
                user_login == ('%s');
        '''
                          % (str(users[chat_id].update_user_list[0])))
        current_user_role = cursor_db.fetchone()
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=4,
                                           input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å...')
        markup.add(types.KeyboardButton('–ì–æ—Å—Ç—å'),
                   types.KeyboardButton('–ö—É—Ä—Å–∞–Ω—Ç'),
                   types.KeyboardButton('–ü–æ–º–æ—â–Ω–∏–∫'),
                   types.KeyboardButton('–û—Ñ–∏—Ü–µ—Ä'))
        markup.add(types.KeyboardButton('‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è'))
        markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(chat_id=chat_id,
                         text=f'‚ùï <b>–°—Ç–∞—Ä–∞—è —Ä–æ–ª—å</b>:\n'
                              f'\t‚îî <i>{role_from_db_to_text(current_user_role[0], process_index=1)}</i>\n\n'
                              f''
                              f'‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{users[chat_id].update_user_list[0]}</b>.',
                         parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, update_users_check_role)
    elif message.text in command_list:
        users[chat_id].update_user_list.clear()
        return all_commands(message=message)
    elif message.text == '‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è':
        users[chat_id].update_user_list.append('*')
        return update_users_check_password(message, input_type='back')
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        users[chat_id].update_user_list.pop(-1)
        return update_users_check_old_login(message, help_list=[], input_type='back')
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        users[chat_id].update_user_list.clear()
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message=message, do_edit_message=False)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–æ–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, update_users_check_password)


def update_users_check_role(message, input_type=None):
    chat_id = message.chat.id

    if (message.text in role_list) or (input_type == 'back'):
        if input_type != 'back':
            users[chat_id].update_user_list.append(message.text)
        with sqlite3.connect('./data_bases/users.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()
        cursor_db.execute('''
            SELECT
                tg_chat_id
            FROM
                users
            WHERE
                user_login == ('%s');
        '''
                          % (str(users[chat_id].update_user_list[0])))
        current_user_chat_id = cursor_db.fetchone()
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                           one_time_keyboard=True,
                                           row_width=4,
                                           input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID...')
        markup.add(types.KeyboardButton('‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è'))
        markup.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'), types.KeyboardButton('üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(chat_id=chat_id,
                         text=f'‚ùï <b>–°—Ç–∞—Ä—ã–π ID</b>:\n'
                              f'\t‚îî <i>{current_user_chat_id[0]}</i>\n\n'
                              f''
                              f'‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{users[chat_id].update_user_list[0]}</b>.',
                         parse_mode='html',
                         reply_markup=markup)
        bot.register_next_step_handler(message, update_users_check_chat_id)
    elif message.text in command_list:
        users[chat_id].update_user_list.clear()
        return all_commands(message=message)
    elif message.text == '‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è':
        users[chat_id].update_user_list.append('*')
        return update_users_check_role(message, input_type='back')
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        users[chat_id].update_user_list.pop(-1)
        return update_users_check_new_login(message, input_type='back')
    elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        users[chat_id].update_user_list.clear()
        delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
        return command_main_page(message=message, do_edit_message=False)
    else:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–æ–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, update_users_check_role)


def update_users_check_chat_id(message, input_type=None):
    chat_id = message.chat.id

    try:
        if (message.text).lstrip('0').isdigit() or input_type == 'back':
            if input_type != 'back':
                users[chat_id].update_user_list.append(message.text)
            with sqlite3.connect('./data_bases/users.sqlite3') as connection_to_db:
                cursor_db = connection_to_db.cursor()
            cursor_db.execute('''
                SELECT
                    user_login,
                    user_password,
                    user_role,
                    tg_chat_id
                FROM
                    users
                WHERE
                    user_login == ('%s');
            '''
                              % (str(users[chat_id].update_user_list[0])))
            current_user_info = cursor_db.fetchone()
            for num in range(1, len(users[chat_id].update_user_list)):
                if users[chat_id].update_user_list[num] == '*':
                    if num == 3:
                        users[chat_id].update_user_list[num] = role_from_db_to_text(str(current_user_info[num - 1]), process_index=1)
                    else:
                        users[chat_id].update_user_list[num] = str(current_user_info[num - 1])
            connection_to_db.commit()
            cursor_db.close()
            connection_to_db.close()

            info = (f'‚ùï –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <b><u>{users[chat_id].update_user_list[0]}</u></b> –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n\n'
                    f''
                    f'–õ–æ–≥–∏–Ω\n'
                    f'\t‚îî <u><b>{current_user_info[0]}</b></u> ‚û° <u><b>{users[chat_id].update_user_list[1]}</b></u>\n'
                    f'–ü–∞—Ä–æ–ª—å\n'
                    f'\t‚îî <u><b>{current_user_info[1]}</b></u> ‚û° <u><b>{users[chat_id].update_user_list[2]}</b></u>\n'
                    f'–†–æ–ª—å\n'
                    f'\t‚îî <u><b>{role_from_db_to_text(current_user_info[2], process_index=1)}</b></u> ‚û° <u><b>{users[chat_id].update_user_list[3]}</b></u>\n'
                    f'ID\n'
                    f'\t‚îî <u><b>{current_user_info[3]}</b></u> ‚û° <u><b>{users[chat_id].update_user_list[4]}</b></u>\n\n'
                    f''
                    f'‚ùî –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ?')

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.row(types.InlineKeyboardButton(text='‚úî –û–±–Ω–æ–≤–∏—Ç—å', callback_data='apply_to_update_user'),
                              types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='deny_to_update_user'))
            delete_reply_markup(message=message)
            bot.send_message(chat_id=chat_id,
                             text=info,
                             parse_mode='html',
                             reply_markup=markup_inline)
        elif message.text in command_list:
            users[chat_id].update_user_list.clear()
            return all_commands(message=message)
        elif message.text == '‚òë –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è':
            users[chat_id].update_user_list.append('*')
            return update_users_check_chat_id(message, input_type='back')
        elif message.text == 'üîô –ù–∞–∑–∞–¥':
            users[chat_id].update_user_list.pop(-1)
            return update_users_check_password(message=message, input_type='back')
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            users[chat_id].update_user_list.clear()
            delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
            return command_main_page(message=message, do_edit_message=False)
        else:
            bot.send_message(chat_id=chat_id,
                             text='‚Ñπ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–æ–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.')
            bot.register_next_step_handler(message, update_users_check_chat_id)
    except AttributeError:
        bot.send_message(chat_id=chat_id,
                         text='‚Ñπ –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–æ–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.')
        bot.register_next_step_handler(message, update_users_check_chat_id)


def apply_to_update_user(message):
    chat_id = message.chat.id

    try:
        with sqlite3.connect('./data_bases/users.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()
        cursor_db.execute('''
            UPDATE
                users
            SET
                user_login = ('%s'),
                user_password = ('%s'),
                user_role = ('%s'),
                tg_chat_id = ('%d')
            WHERE
                user_login == ('%s');
        '''
                          % (str(users[chat_id].update_user_list[1]),
                             str(users[chat_id].update_user_list[2]),
                             role_from_db_to_text(str(users[chat_id].update_user_list[3]), process_index=2),
                             int(users[chat_id].update_user_list[4]),
                             str(users[chat_id].update_user_list[0])))
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='from_updateusers_to_update_user'))
        markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))

        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=f'‚úî –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <u>{users[chat_id].update_user_list[0]}</u> –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n'
                                   f''
                                   f'‚ùî –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?',
                              parse_mode='html',
                              reply_markup=markup_inline)
        users[chat_id].update_user_list.clear()
    except Exception as e:
        return error_from_user(message=message, error_code=e)


def deny_to_update_user(message):
    chat_id = message.chat.id

    try:
        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.add(types.InlineKeyboardButton(text='üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='from_updateusers_to_update_user'))
        markup_inline.add(types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))

        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=f'‚ùå –û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <u>{users[chat_id].update_user_list[0]}</u>.\n\n'
                                   f''
                                   f'‚ùî –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?',
                              parse_mode='html',
                              reply_markup=markup_inline)
        users[chat_id].update_user_list.clear()
    except Exception as e:
        return error_from_user(message=message, error_code=e)


def delete_users_check_login(message, help_list=None):
    chat_id = message.chat.id
    try:
        if message.text in help_list:
            users[chat_id].user_to_delete = message.text
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.row(types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å', callback_data='apply_to_delete_user'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ —É–¥–∞–ª—è—Ç—å', callback_data='deny_to_delete_user'))
            delete_reply_markup(message=message)
            bot.send_message(chat_id=chat_id,
                             text=f'‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[chat_id].user_to_delete}',
                             parse_mode='html',
                             reply_markup=markup_inline)

        elif message.text in command_list:
            return all_commands(message=message)
        elif message.text == 'üîô –ù–∞–∑–∞–¥':
            delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
            return command_update_users(message=message, do_edit_message=False)
        elif message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
            return command_main_page(message=message, do_edit_message=False)
        else:
            bot.send_message(chat_id=chat_id,
                             text='‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.')
            bot.register_next_step_handler(message, delete_users_check_login, help_list=help_list)
    except Exception as e:
        return error_from_user(message=message, error_code=e)


def apply_to_delete_user(message):
    chat_id = message.chat.id

    try:
        with sqlite3.connect('./data_bases/users.sqlite3') as connection_to_db:
            cursor_db = connection_to_db.cursor()
        cursor_db.execute('''
            DELETE FROM
                users
            WHERE
                user_login == ('%s');
        '''
                          % (str(users[chat_id].user_to_delete)))
        connection_to_db.commit()
        cursor_db.close()
        connection_to_db.close()

        markup_inline = types.InlineKeyboardMarkup()
        markup_inline.row(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='from_updateusers_to_delete_user'),
                          types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message.message_id,
                              text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º <u>{users[chat_id].user_to_delete}</u> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
                              parse_mode='html',
                              reply_markup=markup_inline)
        users[chat_id].user_to_delete = ''
    except Exception as e:
        return error_from_user(message=message, error_code=e)


def deny_to_delete_user(message):
    chat_id = message.chat.id

    markup_inline = types.InlineKeyboardMarkup()
    markup_inline.row(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='from_updateusers_to_delete_user'),
                      types.InlineKeyboardButton(text='üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='back_to_main_page'))
    bot.edit_message_text(chat_id=chat_id,
                          message_id=message.message_id,
                          text=f'‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–æ–≥–∏–Ω–æ–º <u>{users[chat_id].user_to_delete}</u>.',
                          parse_mode='html',
                          reply_markup=markup_inline)
    users[chat_id].user_to_delete = ''


@bot.message_handler()
def some_text_from_user(message):
    chat_id = message.chat.id

    try:
        global start_year_of_start
        global last_num_year_of_start
        now_data = date.today()
        if ((int(now_data.year) > start_year_of_start) and (int(now_data.month) >= 8) and (
                int(now_data.day) >= 10)):  # –µ—Å–ª–∏ –Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥ > –≥–æ–¥ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –ò –¥–∞—Ç–∞ >= 10 –∞–≤–≥—É—Å—Ç–∞
            start_year_of_start = int(now_data.year)
            last_num_year_of_start = start_year_of_start % 10
            update_info_every_year(message)
            bot.send_message(chat_id=chat_id,
                             text='üîÅ –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')

        if users[chat_id].user_role != 'guest':
            if message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
                delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...')
                return command_main_page(message)
            else:
                bot.send_message(chat_id=chat_id,
                                 text='‚Ñπ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.')

        else:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add(types.InlineKeyboardButton(text='‚ñ∂ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='signup'),
                              types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è', callback_data='back_to_start'))
            bot.send_message(chat_id=chat_id,
                             text=f'‚ùï –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? ‚ùï',
                             reply_markup=markup_inline)

    except KeyError:
        delete_reply_markup(message=message,
                            text_hint='–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...')
        users[chat_id] = User()
        users[chat_id].user_id = message.from_user.id
        users[chat_id].user_name = message.from_user.first_name
        users[chat_id].user_role = 'guest'

        bot.send_message(chat_id=chat_id,
                         text=f'üõ† –¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º!')


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    chat_id = callback.message.chat.id

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç–æ –≤—Å–µ —Å—Ç–µ–ø —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è
    bot.clear_step_handler_by_chat_id(chat_id=chat_id)

    try:
        if users[chat_id].user_role:
            if callback.data == 'from_mainpage_to_help':
                return command_help(callback.message, do_edit_message=True)
            elif callback.data == 'from_mainpage_to_info_about_user':
                return command_my_id(callback.message, do_edit_message=True)

            elif users[chat_id].user_role == 'guest':
                if callback.data == 'login':
                    return login_in_system(callback.message, do_edit_message=True)
                elif callback.data == 'signup':
                    return signup_in_system(callback.message)
                elif callback.data == 'input_other_login':
                    return login_in_system(callback.message, do_edit_message=True)
                elif callback.data == 'back_to_start':
                    return command_start(callback.message, do_edit_message=True)

            # –¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –≥–æ—Å—Ç–µ–π
            elif users[chat_id].user_role != 'guest':
                if callback.data == 'back_to_main_page':
                    return command_main_page(callback.message, do_edit_message=True)

                elif callback.data == 'stay_on_system':
                    return command_main_page(callback.message, do_edit_message=True)
                elif callback.data == 'log_out':
                    return logout_function(message=callback.message)

                elif callback.data == 'from_mainpage_to_schedule':
                    return command_schedule(callback.message, do_edit_message=True)
                elif callback.data == 'from_mainpage_to_all':
                    bot.answer_callback_query(callback_query_id=callback.id,
                                              show_alert=False,
                                              text='–í—ã–±—Ä–∞–Ω–æ: üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö')
                    return command_all(callback.message, do_edit_message=True, process_index=1)

                elif callback.data == 'today_schedule_callback':
                    bot.answer_callback_query(callback_query_id=callback.id,
                                              show_alert=False,
                                              text='–í—ã–±—Ä–∞–Ω–æ: üìÜ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
                    return create_schedule_courses(callback.message, do_edit_message=True, process_index=1)
                elif callback.data == 'subscribe_to_schedule_callback':
                    bot.answer_callback_query(callback_query_id=callback.id,
                                              show_alert=False,
                                              text='–í—ã–±—Ä–∞–Ω–æ: üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏')
                    return create_schedule_courses(callback.message, do_edit_message=True, process_index=2)
                elif callback.data == 'unsubscribe_to_schedule_callback':
                    bot.answer_callback_query(callback_query_id=callback.id,
                                              show_alert=False,
                                              text='–í—ã–±—Ä–∞–Ω–æ: üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏')
                    return unsubscribe_to_schedule(callback.message)

                elif callback.data == 'back_to_schedule':
                    return command_schedule(callback.message, do_edit_message=True)

                elif users[chat_id].user_role != 'cadet':
                    if callback.data == 'from_mainpage_to_add':
                        bot.answer_callback_query(callback_query_id=callback.id,
                                                  show_alert=False,
                                                  text='–í—ã–±—Ä–∞–Ω–æ: ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞–Ω—Ç–∞—Ö')
                        return command_all(callback.message, do_edit_message=True, process_index=2)

                    elif callback.data == 'add_file_from_user_callback':
                        bot.answer_callback_query(callback_query_id=callback.id,
                                                  show_alert=False,
                                                  text='–í—ã–±—Ä–∞–Ω–æ: ‚¨á –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞/–≤–∑–≤–æ–¥–∞')
                        return schedule_document_rules(message=callback.message)
                    elif callback.data == 'apply_to_save_document':
                        return apply_to_save_schedule_document(message=callback.message)
                    elif callback.data == 'deny_to_save_document':
                        return deny_to_save_schedule_document(message=callback.message)

                    elif users[chat_id].user_role != 'helper':
                        if callback.data == 'from_mainpage_to_update_students':
                            return update_students(callback.message, do_edit_message=True)
                        elif callback.data == 'from_updatestudents_to_add_student':
                            bot.answer_callback_query(callback_query_id=callback.id,
                                                      show_alert=False,
                                                      text='–í—ã–±—Ä–∞–Ω–æ: üë®üéì –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å–∞–Ω—Ç–∞')
                            return command_add_cadet(callback.message, do_edit_message=True)
                        elif callback.data == 'from_updatestudents_to_update_student':
                            bot.answer_callback_query(callback_query_id=callback.id,
                                                      show_alert=False,
                                                      text='–í—ã–±—Ä–∞–Ω–æ: üë®üîÅ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–∞–Ω—Ç–∞')
                            return command_all(callback.message, do_edit_message=True, process_index=4)
                        elif callback.data == 'from_updatestudents_to_delete_student':
                            bot.answer_callback_query(callback_query_id=callback.id,
                                                      show_alert=False,
                                                      text='–í—ã–±—Ä–∞–Ω–æ: üë®‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å–∞–Ω—Ç–∞')
                            return command_all(callback.message, do_edit_message=True, process_index=3)
                        elif callback.data == 'apply_to_save_add_student':
                            return apply_add_student(message=callback.message)
                        elif callback.data == 'deny_to_save_add_student':
                            return deny_add_student(message=callback.message)

                        elif callback.data == 'from_mainpage_to_update_users':
                            return command_update_users(callback.message, do_edit_message=True)
                        elif callback.data == 'from_updateusers_to_update_user':
                            bot.answer_callback_query(callback_query_id=callback.id,
                                                      show_alert=False,
                                                      text='–í—ã–±—Ä–∞–Ω–æ: üë®‚ÄçüíªüîÅ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                            return command_update_user(callback.message, process_index=1)
                        elif callback.data == 'apply_to_update_user':
                            return apply_to_update_user(message=callback.message)
                        elif callback.data == 'deny_to_update_user':
                            return deny_to_update_user(message=callback.message)

                        elif callback.data == 'from_updateusers_to_delete_user':
                            bot.answer_callback_query(callback_query_id=callback.id,
                                                      show_alert=False,
                                                      text='–í—ã–±—Ä–∞–Ω–æ: üë®‚Äçüíª‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                            return command_update_user(callback.message, process_index=2)
                        elif callback.data == 'apply_to_delete_user':
                            return apply_to_delete_user(message=callback.message)
                        elif callback.data == 'deny_to_delete_user':
                            return deny_to_delete_user(message=callback.message)

        bot.answer_callback_query(callback_query_id=callback.id,
                                  show_alert=True,
                                  text='–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!')
        bot.delete_message(chat_id=chat_id,
                           message_id=callback.message.message_id)
        return

    except KeyError:
        users[chat_id] = User()
        users[chat_id].user_role = 'guest'
        bot.answer_callback_query(callback_query_id=callback.id,
                                  show_alert=True,
                                  text='–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!')
        bot.delete_message(chat_id=chat_id,
                           message_id=callback.message.message_id)


# –ø—Ä–∏–Ω—è—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def take_document(message):
    chat_id = message.chat.id

    msg = bot.reply_to(message, text="–ü—Ä–∏—Å—Ö–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑...")

    try:
        if message.document.file_name.split('.')[-1] == 'xlsx':
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            users[chat_id].excel_schedule_file_name = './xlsx_files/' + message.document.file_name
            with open(users[chat_id].excel_schedule_file_name, 'wb') as new_file:
                new_file.write(downloaded_file)

            delete_reply_markup(message=message, text_hint='–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥...')
            users[chat_id].groups_in_xlsx_save = check_schedule_document_from_user(message, msg_help=msg)
        else:
            bot.delete_message(chat_id=chat_id,
                               message_id=msg.message_id)
            return schedule_document_rules_error(message)
    except AttributeError:
        bot.delete_message(chat_id=chat_id,
                           message_id=msg.message_id)
        if message.text == 'üîô –ù–∞–∑–∞–¥':
            delete_reply_markup(message=message, text_hint='–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...')
            return command_schedule(message=message, do_edit_message=False)
        elif message.text in command_list:
            return all_commands(message=message)
        else:
            return schedule_document_rules_error(message=message)


@bot.message_handler(content_types=['document'])
def error_send_file(message):
    chat_id = message.chat.id

    try:
        if (users[chat_id].user_role == 'officer') or (users[chat_id].user_role == 'helper'):
            bot.reply_to(message=message,
                         text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é, –∞ –∑–∞—Ç–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª.')
        else:
            bot.reply_to(message=message,
                         text='–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç—É —Ñ–∞–π–ª–æ–≤!')

    except KeyError:
        users[chat_id] = User()
        users[chat_id].user_id = message.from_user.id
        users[chat_id].user_name = message.from_user.first_name
        users[chat_id].user_role = 'guest'
        bot.reply_to(message=message,
                     text='–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')


if __name__ == '__main__':
    bot.polling(none_stop=True)
